
STM32_RTC_DS1307_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002778  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08002948  08002948  00003948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a2c  08002a2c  00004070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002a2c  08002a2c  00003a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a34  08002a34  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a34  08002a34  00003a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a38  08002a38  00003a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08002a3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000070  08002aac  00004070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08002aac  00004208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002893  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c84  00000000  00000000  00006933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000360  00000000  00000000  000075b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000269  00000000  00000000  00007918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041d6  00000000  00000000  00007b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003eb4  00000000  00000000  0000bd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c9ee  00000000  00000000  0000fc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001c5f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013e4  00000000  00000000  0001c63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0001da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002930 	.word	0x08002930

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002930 	.word	0x08002930

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:

RTC_Date_t current_date;
RTC_Time_t current_time;

int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	printf("RTC Test\n");
 80002b4:	4816      	ldr	r0, [pc, #88]	@ (8000310 <main+0x60>)
 80002b6:	f001 fcd9 	bl	8001c6c <puts>

	LCD_Init();
 80002ba:	f000 fa9b 	bl	80007f4 <LCD_Init>

	LCD_Print_String("RTC Test..");
 80002be:	4815      	ldr	r0, [pc, #84]	@ (8000314 <main+0x64>)
 80002c0:	f000 fb12 	bl	80008e8 <LCD_Print_String>
	delay_ms(2000);
 80002c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002c8:	f000 fc0c 	bl	8000ae4 <delay_ms>

	LCD_Display_Clear();
 80002cc:	f000 fb96 	bl	80009fc <LCD_Display_Clear>
	LCD_Display_Return_Home();
 80002d0:	f000 fb9e 	bl	8000a10 <LCD_Display_Return_Home>

	if(RTC_DS1307_Init() == 1)
 80002d4:	f000 fc34 	bl	8000b40 <RTC_DS1307_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d104      	bne.n	80002e8 <main+0x38>
	{
		printf("RTC Init Failed\n");	//CH=1
 80002de:	480e      	ldr	r0, [pc, #56]	@ (8000318 <main+0x68>)
 80002e0:	f001 fcc4 	bl	8001c6c <puts>
		while(1);
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <main+0x34>
	}

	Systick_Timer_Init(1);
 80002e8:	2001      	movs	r0, #1
 80002ea:	f000 f81b 	bl	8000324 <Systick_Timer_Init>

	//Set Date and Time
	RTC_Set_Date();
 80002ee:	f000 f861 	bl	80003b4 <RTC_Set_Date>
	RTC_Set_Time();
 80002f2:	f000 f875 	bl	80003e0 <RTC_Set_Time>

	//Get Date and Time
	RTC_DS1307_Get_Current_Date(&current_date);
 80002f6:	4809      	ldr	r0, [pc, #36]	@ (800031c <main+0x6c>)
 80002f8:	f000 fd11 	bl	8000d1e <RTC_DS1307_Get_Current_Date>
	RTC_DS1307_Get_Current_Time(&current_time);
 80002fc:	4808      	ldr	r0, [pc, #32]	@ (8000320 <main+0x70>)
 80002fe:	f000 fc86 	bl	8000c0e <RTC_DS1307_Get_Current_Time>

	//Print Date and Time
	RTC_Print_Time();
 8000302:	f000 f883 	bl	800040c <RTC_Print_Time>
	RTC_Print_Date();
 8000306:	f000 f8c7 	bl	8000498 <RTC_Print_Date>

	while(1);
 800030a:	bf00      	nop
 800030c:	e7fd      	b.n	800030a <main+0x5a>
 800030e:	bf00      	nop
 8000310:	08002948 	.word	0x08002948
 8000314:	08002954 	.word	0x08002954
 8000318:	08002960 	.word	0x08002960
 800031c:	2000008c 	.word	0x2000008c
 8000320:	20000090 	.word	0x20000090

08000324 <Systick_Timer_Init>:
}

void Systick_Timer_Init(uint32_t tick_hz)
{
 8000324:	b480      	push	{r7}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 800032c:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <Systick_Timer_Init+0x60>)
 800032e:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000330:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <Systick_Timer_Init+0x64>)
 8000332:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;	//16MHz/1 = 16000000
 8000334:	4a15      	ldr	r2, [pc, #84]	@ (800038c <Systick_Timer_Init+0x68>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	fbb2 f3f3 	udiv	r3, r2, r3
 800033c:	3b01      	subs	r3, #1
 800033e:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	431a      	orrs	r2, r3
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f043 0202 	orr.w	r2, r3, #2
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f043 0204 	orr.w	r2, r3, #4
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f043 0201 	orr.w	r2, r3, #1
 8000372:	693b      	ldr	r3, [r7, #16]
 8000374:	601a      	str	r2, [r3, #0]

}
 8000376:	bf00      	nop
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	e000e014 	.word	0xe000e014
 8000388:	e000e010 	.word	0xe000e010
 800038c:	00f42400 	.word	0x00f42400

08000390 <SysTick_Handler>:

void SysTick_Handler()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	//Get Date and Time
	RTC_DS1307_Get_Current_Date(&current_date);
 8000394:	4805      	ldr	r0, [pc, #20]	@ (80003ac <SysTick_Handler+0x1c>)
 8000396:	f000 fcc2 	bl	8000d1e <RTC_DS1307_Get_Current_Date>
	RTC_DS1307_Get_Current_Time(&current_time);
 800039a:	4805      	ldr	r0, [pc, #20]	@ (80003b0 <SysTick_Handler+0x20>)
 800039c:	f000 fc37 	bl	8000c0e <RTC_DS1307_Get_Current_Time>

	//Print Date and Time
	RTC_Print_Time();
 80003a0:	f000 f834 	bl	800040c <RTC_Print_Time>
	RTC_Print_Date();
 80003a4:	f000 f878 	bl	8000498 <RTC_Print_Date>
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	2000008c 	.word	0x2000008c
 80003b0:	20000090 	.word	0x20000090

080003b4 <RTC_Set_Date>:

void RTC_Set_Date()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	current_date.day = SUNDAY;
 80003b8:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <RTC_Set_Date+0x28>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	701a      	strb	r2, [r3, #0]
	current_date.date = 10;
 80003be:	4b07      	ldr	r3, [pc, #28]	@ (80003dc <RTC_Set_Date+0x28>)
 80003c0:	220a      	movs	r2, #10
 80003c2:	705a      	strb	r2, [r3, #1]
	current_date.month = 8;
 80003c4:	4b05      	ldr	r3, [pc, #20]	@ (80003dc <RTC_Set_Date+0x28>)
 80003c6:	2208      	movs	r2, #8
 80003c8:	709a      	strb	r2, [r3, #2]
	current_date.year = 25;
 80003ca:	4b04      	ldr	r3, [pc, #16]	@ (80003dc <RTC_Set_Date+0x28>)
 80003cc:	2219      	movs	r2, #25
 80003ce:	70da      	strb	r2, [r3, #3]

	RTC_DS1307_Set_Current_Date(&current_date);
 80003d0:	4802      	ldr	r0, [pc, #8]	@ (80003dc <RTC_Set_Date+0x28>)
 80003d2:	f000 fc6c 	bl	8000cae <RTC_DS1307_Set_Current_Date>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	2000008c 	.word	0x2000008c

080003e0 <RTC_Set_Time>:

void RTC_Set_Time()
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	current_time.hours = 10;
 80003e4:	4b08      	ldr	r3, [pc, #32]	@ (8000408 <RTC_Set_Time+0x28>)
 80003e6:	220a      	movs	r2, #10
 80003e8:	709a      	strb	r2, [r3, #2]
	current_time.minutes = 30;
 80003ea:	4b07      	ldr	r3, [pc, #28]	@ (8000408 <RTC_Set_Time+0x28>)
 80003ec:	221e      	movs	r2, #30
 80003ee:	705a      	strb	r2, [r3, #1]
	current_time.seconds = 00;
 80003f0:	4b05      	ldr	r3, [pc, #20]	@ (8000408 <RTC_Set_Time+0x28>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
	current_time.time_format = TIME_FORMAT_12HRS_AM;
 80003f6:	4b04      	ldr	r3, [pc, #16]	@ (8000408 <RTC_Set_Time+0x28>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	70da      	strb	r2, [r3, #3]

	RTC_DS1307_Set_Current_Time(&current_time);
 80003fc:	4802      	ldr	r0, [pc, #8]	@ (8000408 <RTC_Set_Time+0x28>)
 80003fe:	f000 fbbd 	bl	8000b7c <RTC_DS1307_Set_Current_Time>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000090 	.word	0x20000090

0800040c <RTC_Print_Time>:

void RTC_Print_Time()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
	char *am_pm;

	if(current_time.time_format != TIME_FORMAT_24HRS)
 8000412:	4b1c      	ldr	r3, [pc, #112]	@ (8000484 <RTC_Print_Time+0x78>)
 8000414:	78db      	ldrb	r3, [r3, #3]
 8000416:	2b02      	cmp	r3, #2
 8000418:	d020      	beq.n	800045c <RTC_Print_Time+0x50>
	{
		//TIME_FORMAT_12HRS_AM
		if(current_time.time_format == TIME_FORMAT_12HRS_AM)
 800041a:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <RTC_Print_Time+0x78>)
 800041c:	78db      	ldrb	r3, [r3, #3]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d102      	bne.n	8000428 <RTC_Print_Time+0x1c>
		{
			am_pm = "PM";
 8000422:	4b19      	ldr	r3, [pc, #100]	@ (8000488 <RTC_Print_Time+0x7c>)
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	e001      	b.n	800042c <RTC_Print_Time+0x20>
		}
		else
		{
			am_pm = "AM";
 8000428:	4b18      	ldr	r3, [pc, #96]	@ (800048c <RTC_Print_Time+0x80>)
 800042a:	607b      	str	r3, [r7, #4]
		}
		printf("Current time = %s %s\n", Time_to_String(&current_time), am_pm); //10:30:00 AM
 800042c:	4815      	ldr	r0, [pc, #84]	@ (8000484 <RTC_Print_Time+0x78>)
 800042e:	f000 f883 	bl	8000538 <Time_to_String>
 8000432:	4603      	mov	r3, r0
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	4619      	mov	r1, r3
 8000438:	4815      	ldr	r0, [pc, #84]	@ (8000490 <RTC_Print_Time+0x84>)
 800043a:	f001 fbaf 	bl	8001b9c <iprintf>
		LCD_Set_Cursor(1, 1);
 800043e:	2101      	movs	r1, #1
 8000440:	2001      	movs	r0, #1
 8000442:	f000 fa9d 	bl	8000980 <LCD_Set_Cursor>
		LCD_Print_String(Time_to_String(&current_time));
 8000446:	480f      	ldr	r0, [pc, #60]	@ (8000484 <RTC_Print_Time+0x78>)
 8000448:	f000 f876 	bl	8000538 <Time_to_String>
 800044c:	4603      	mov	r3, r0
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fa4a 	bl	80008e8 <LCD_Print_String>
		LCD_Print_String(am_pm);
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f000 fa47 	bl	80008e8 <LCD_Print_String>
	{
		//TIME_FORMAT_24HRS
		printf("Current time = %s\n", Time_to_String(&current_time));
		LCD_Print_String(Time_to_String(&current_time));
	}
}
 800045a:	e00e      	b.n	800047a <RTC_Print_Time+0x6e>
		printf("Current time = %s\n", Time_to_String(&current_time));
 800045c:	4809      	ldr	r0, [pc, #36]	@ (8000484 <RTC_Print_Time+0x78>)
 800045e:	f000 f86b 	bl	8000538 <Time_to_String>
 8000462:	4603      	mov	r3, r0
 8000464:	4619      	mov	r1, r3
 8000466:	480b      	ldr	r0, [pc, #44]	@ (8000494 <RTC_Print_Time+0x88>)
 8000468:	f001 fb98 	bl	8001b9c <iprintf>
		LCD_Print_String(Time_to_String(&current_time));
 800046c:	4805      	ldr	r0, [pc, #20]	@ (8000484 <RTC_Print_Time+0x78>)
 800046e:	f000 f863 	bl	8000538 <Time_to_String>
 8000472:	4603      	mov	r3, r0
 8000474:	4618      	mov	r0, r3
 8000476:	f000 fa37 	bl	80008e8 <LCD_Print_String>
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000090 	.word	0x20000090
 8000488:	08002970 	.word	0x08002970
 800048c:	08002974 	.word	0x08002974
 8000490:	08002978 	.word	0x08002978
 8000494:	08002990 	.word	0x08002990

08000498 <RTC_Print_Date>:

void RTC_Print_Date()
{
 8000498:	b598      	push	{r3, r4, r7, lr}
 800049a:	af00      	add	r7, sp, #0
	//Date : 10/8/25 <SUNDAY>
	printf("Current Date = %s <%s> \n", Date_to_String(&current_date), get_day_of_week(current_date.day));
 800049c:	4815      	ldr	r0, [pc, #84]	@ (80004f4 <RTC_Print_Date+0x5c>)
 800049e:	f000 f875 	bl	800058c <Date_to_String>
 80004a2:	4604      	mov	r4, r0
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <RTC_Print_Date+0x5c>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 f827 	bl	80004fc <get_day_of_week>
 80004ae:	4603      	mov	r3, r0
 80004b0:	461a      	mov	r2, r3
 80004b2:	4621      	mov	r1, r4
 80004b4:	4810      	ldr	r0, [pc, #64]	@ (80004f8 <RTC_Print_Date+0x60>)
 80004b6:	f001 fb71 	bl	8001b9c <iprintf>
	LCD_Set_Cursor(2, 1);
 80004ba:	2101      	movs	r1, #1
 80004bc:	2002      	movs	r0, #2
 80004be:	f000 fa5f 	bl	8000980 <LCD_Set_Cursor>
	LCD_Print_String(Date_to_String(&current_date));
 80004c2:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <RTC_Print_Date+0x5c>)
 80004c4:	f000 f862 	bl	800058c <Date_to_String>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fa0c 	bl	80008e8 <LCD_Print_String>
	LCD_Send_Char('<');
 80004d0:	203c      	movs	r0, #60	@ 0x3c
 80004d2:	f000 f9e5 	bl	80008a0 <LCD_Send_Char>
	LCD_Print_String(get_day_of_week(current_date.day));
 80004d6:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <RTC_Print_Date+0x5c>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f80e 	bl	80004fc <get_day_of_week>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fa00 	bl	80008e8 <LCD_Print_String>
	LCD_Send_Char('>');
 80004e8:	203e      	movs	r0, #62	@ 0x3e
 80004ea:	f000 f9d9 	bl	80008a0 <LCD_Send_Char>
}
 80004ee:	bf00      	nop
 80004f0:	bd98      	pop	{r3, r4, r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000008c 	.word	0x2000008c
 80004f8:	080029a4 	.word	0x080029a4

080004fc <get_day_of_week>:

char* get_day_of_week(uint8_t i)
{
 80004fc:	b4b0      	push	{r4, r5, r7}
 80004fe:	b08b      	sub	sp, #44	@ 0x2c
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	char* days[] = {"SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"};
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <get_day_of_week+0x38>)
 8000508:	f107 040c 	add.w	r4, r7, #12
 800050c:	461d      	mov	r5, r3
 800050e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000512:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000516:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	3b01      	subs	r3, #1
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	3328      	adds	r3, #40	@ 0x28
 8000522:	443b      	add	r3, r7
 8000524:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000528:	4618      	mov	r0, r3
 800052a:	372c      	adds	r7, #44	@ 0x2c
 800052c:	46bd      	mov	sp, r7
 800052e:	bcb0      	pop	{r4, r5, r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	080029dc 	.word	0x080029dc

08000538 <Time_to_String>:

char* Time_to_String(RTC_Time_t *rtc_time)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	//HH:MM:SS
	static char buf[9];
	buf[2] = ':';
 8000540:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <Time_to_String+0x48>)
 8000542:	223a      	movs	r2, #58	@ 0x3a
 8000544:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <Time_to_String+0x48>)
 8000548:	223a      	movs	r2, #58	@ 0x3a
 800054a:	715a      	strb	r2, [r3, #5]

	Number_to_String(rtc_time->hours, &buf[0]); //&buf[0] = &buf
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	789b      	ldrb	r3, [r3, #2]
 8000550:	490b      	ldr	r1, [pc, #44]	@ (8000580 <Time_to_String+0x48>)
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f844 	bl	80005e0 <Number_to_String>
	Number_to_String(rtc_time->minutes, &buf[3]);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	785b      	ldrb	r3, [r3, #1]
 800055c:	4909      	ldr	r1, [pc, #36]	@ (8000584 <Time_to_String+0x4c>)
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f83e 	bl	80005e0 <Number_to_String>
	Number_to_String(rtc_time->seconds, &buf[6]);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4907      	ldr	r1, [pc, #28]	@ (8000588 <Time_to_String+0x50>)
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f838 	bl	80005e0 <Number_to_String>

	buf[8] = '\0';
 8000570:	4b03      	ldr	r3, [pc, #12]	@ (8000580 <Time_to_String+0x48>)
 8000572:	2200      	movs	r2, #0
 8000574:	721a      	strb	r2, [r3, #8]

	return buf;
 8000576:	4b02      	ldr	r3, [pc, #8]	@ (8000580 <Time_to_String+0x48>)
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000094 	.word	0x20000094
 8000584:	20000097 	.word	0x20000097
 8000588:	2000009a 	.word	0x2000009a

0800058c <Date_to_String>:

char* Date_to_String(RTC_Date_t *rtc_date)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	//dd/mm/yy
	static char buf[9];
	buf[2] = '/';
 8000594:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <Date_to_String+0x48>)
 8000596:	222f      	movs	r2, #47	@ 0x2f
 8000598:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 800059a:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <Date_to_String+0x48>)
 800059c:	222f      	movs	r2, #47	@ 0x2f
 800059e:	715a      	strb	r2, [r3, #5]

	Number_to_String(rtc_date->date, &buf[0]); //&buf[0] = &buf
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	785b      	ldrb	r3, [r3, #1]
 80005a4:	490b      	ldr	r1, [pc, #44]	@ (80005d4 <Date_to_String+0x48>)
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f81a 	bl	80005e0 <Number_to_String>
	Number_to_String(rtc_date->month, &buf[3]);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	4909      	ldr	r1, [pc, #36]	@ (80005d8 <Date_to_String+0x4c>)
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f814 	bl	80005e0 <Number_to_String>
	Number_to_String(rtc_date->year, &buf[6]);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	78db      	ldrb	r3, [r3, #3]
 80005bc:	4907      	ldr	r1, [pc, #28]	@ (80005dc <Date_to_String+0x50>)
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f80e 	bl	80005e0 <Number_to_String>

	buf[8] = '\0';
 80005c4:	4b03      	ldr	r3, [pc, #12]	@ (80005d4 <Date_to_String+0x48>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	721a      	strb	r2, [r3, #8]

	return buf;
 80005ca:	4b02      	ldr	r3, [pc, #8]	@ (80005d4 <Date_to_String+0x48>)

}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000a0 	.word	0x200000a0
 80005d8:	200000a3 	.word	0x200000a3
 80005dc:	200000a6 	.word	0x200000a6

080005e0 <Number_to_String>:

void Number_to_String(uint8_t num, char* buf)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
	if(num < 10)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2b09      	cmp	r3, #9
 80005f0:	d809      	bhi.n	8000606 <Number_to_String+0x26>
	{
		buf[0] = '0';
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2230      	movs	r2, #48	@ 0x30
 80005f6:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	79fa      	ldrb	r2, [r7, #7]
 80005fe:	3230      	adds	r2, #48	@ 0x30
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	701a      	strb	r2, [r3, #0]
	else if(num >= 10 && num < 99)
	{
		buf[0] = (num / 10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 8000604:	e01f      	b.n	8000646 <Number_to_String+0x66>
	else if(num >= 10 && num < 99)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2b09      	cmp	r3, #9
 800060a:	d91c      	bls.n	8000646 <Number_to_String+0x66>
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b62      	cmp	r3, #98	@ 0x62
 8000610:	d819      	bhi.n	8000646 <Number_to_String+0x66>
		buf[0] = (num / 10) + 48;
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	4a0f      	ldr	r2, [pc, #60]	@ (8000654 <Number_to_String+0x74>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	08db      	lsrs	r3, r3, #3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	3330      	adds	r3, #48	@ 0x30
 8000620:	b2da      	uxtb	r2, r3
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 8000626:	79fa      	ldrb	r2, [r7, #7]
 8000628:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <Number_to_String+0x74>)
 800062a:	fba3 1302 	umull	r1, r3, r3, r2
 800062e:	08d9      	lsrs	r1, r3, #3
 8000630:	460b      	mov	r3, r1
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	440b      	add	r3, r1
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	b2da      	uxtb	r2, r3
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	3230      	adds	r2, #48	@ 0x30
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	701a      	strb	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	cccccccd 	.word	0xcccccccd

08000658 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	e00a      	b.n	8000680 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800066a:	f3af 8000 	nop.w
 800066e:	4601      	mov	r1, r0
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	60ba      	str	r2, [r7, #8]
 8000676:	b2ca      	uxtb	r2, r1
 8000678:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	dbf0      	blt.n	800066a <_read+0x12>
  }

  return len;
 8000688:	687b      	ldr	r3, [r7, #4]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b086      	sub	sp, #24
 8000696:	af00      	add	r7, sp, #0
 8000698:	60f8      	str	r0, [r7, #12]
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	e009      	b.n	80006b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	60ba      	str	r2, [r7, #8]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbf1      	blt.n	80006a4 <_write+0x12>
  }
  return len;
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <_close>:

int _close(int file)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b083      	sub	sp, #12
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006f2:	605a      	str	r2, [r3, #4]
  return 0;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <_isatty>:

int _isatty(int file)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	@ (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f001 fbb0 	bl	8001ec8 <__errno>
 8000768:	4603      	mov	r3, r0
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	@ (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20020000 	.word	0x20020000
 8000794:	00000400 	.word	0x00000400
 8000798:	200000ac 	.word	0x200000ac
 800079c:	20000208 	.word	0x20000208

080007a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a0:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	@ (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	@ (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80007ce:	f001 fb81 	bl	8001ed4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80007d2:	f7ff fd6d 	bl	80002b0 <main>

080007d6 <LoopForever>:

LoopForever:
  b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   r0, =_estack
 80007d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007e4:	08002a3c 	.word	0x08002a3c
  ldr r2, =_sbss
 80007e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007ec:	20000208 	.word	0x20000208

080007f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC_IRQHandler>
	...

080007f4 <LCD_Init>:
static void LCD_Write_Nibble(uint8_t value);
static void LCD_Enable();
static void LCD_GPIO_Pin_Config();

void LCD_Init()
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	//1. Configure GPIO Pins for LCD Pins
	LCD_GPIO_Pin_Config();
 80007f8:	f000 f914 	bl	8000a24 <LCD_GPIO_Pin_Config>

	//2. Do LCD Init
	delay_ms(40);
 80007fc:	2028      	movs	r0, #40	@ 0x28
 80007fe:	f000 f971 	bl	8000ae4 <delay_ms>

	//RS=0, for LCD Command and make R/W=0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);  //RS=0
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	4813      	ldr	r0, [pc, #76]	@ (8000854 <LCD_Init+0x60>)
 8000808:	f000 fe64 	bl	80014d4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);  //R/W=1
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	4810      	ldr	r0, [pc, #64]	@ (8000854 <LCD_Init+0x60>)
 8000812:	f000 fe5f 	bl	80014d4 <GPIO_WriteToOutputPin>

	LCD_Write_Nibble(0x3); 	// 0 0 1 1, D4=1, D5=1, D6=0, D7=0
 8000816:	2003      	movs	r0, #3
 8000818:	f000 f87a 	bl	8000910 <LCD_Write_Nibble>
	delay_ms(5);
 800081c:	2005      	movs	r0, #5
 800081e:	f000 f961 	bl	8000ae4 <delay_ms>

	LCD_Write_Nibble(0x3);
 8000822:	2003      	movs	r0, #3
 8000824:	f000 f874 	bl	8000910 <LCD_Write_Nibble>
	delay_us(150);
 8000828:	2096      	movs	r0, #150	@ 0x96
 800082a:	f000 f974 	bl	8000b16 <delay_us>

	LCD_Write_Nibble(0x3);
 800082e:	2003      	movs	r0, #3
 8000830:	f000 f86e 	bl	8000910 <LCD_Write_Nibble>
	LCD_Write_Nibble(0x2);
 8000834:	2002      	movs	r0, #2
 8000836:	f000 f86b 	bl	8000910 <LCD_Write_Nibble>

	//Function Set Command
	LCD_Send_Command(LCD_CMD_4DL_2N_5X8F);
 800083a:	2028      	movs	r0, #40	@ 0x28
 800083c:	f000 f80c 	bl	8000858 <LCD_Send_Command>

	//Display On/Off Control Command, Display ON, Cursor ON
	LCD_Send_Command(LCD_CMD_DON_CURON);
 8000840:	200e      	movs	r0, #14
 8000842:	f000 f809 	bl	8000858 <LCD_Send_Command>

	//Display Clear Command
	LCD_Display_Clear();
 8000846:	f000 f8d9 	bl	80009fc <LCD_Display_Clear>

	//Entry Mode Set Command
	LCD_Send_Command(LCD_CMD_INCADDR);
 800084a:	2006      	movs	r0, #6
 800084c:	f000 f804 	bl	8000858 <LCD_Send_Command>

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020c00 	.word	0x40020c00

08000858 <LCD_Send_Command>:

void LCD_Send_Command(uint8_t cmd)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
	//Make RS=0 and R/W=0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);  //RS=0
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	480d      	ldr	r0, [pc, #52]	@ (800089c <LCD_Send_Command+0x44>)
 8000868:	f000 fe34 	bl	80014d4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);  //R/W=1
 800086c:	2200      	movs	r2, #0
 800086e:	2101      	movs	r1, #1
 8000870:	480a      	ldr	r0, [pc, #40]	@ (800089c <LCD_Send_Command+0x44>)
 8000872:	f000 fe2f 	bl	80014d4 <GPIO_WriteToOutputPin>

	//Send Higher Nibble of command
	LCD_Write_Nibble(cmd >> 4);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	091b      	lsrs	r3, r3, #4
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f847 	bl	8000910 <LCD_Write_Nibble>

	//Send Lower Nibble of command
	LCD_Write_Nibble(cmd & 0x0F);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f003 030f 	and.w	r3, r3, #15
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f000 f840 	bl	8000910 <LCD_Write_Nibble>

	//Make HIGH to LOW transition on Enable Pin
	LCD_Enable();
 8000890:	f000 f89e 	bl	80009d0 <LCD_Enable>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40020c00 	.word	0x40020c00

080008a0 <LCD_Send_Char>:

void LCD_Send_Char(uint8_t data)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	//Make RS=1 for Data and R/W=0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);  //RS=0
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <LCD_Send_Char+0x44>)
 80008b0:	f000 fe10 	bl	80014d4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);  //R/W=1
 80008b4:	2200      	movs	r2, #0
 80008b6:	2101      	movs	r1, #1
 80008b8:	480a      	ldr	r0, [pc, #40]	@ (80008e4 <LCD_Send_Char+0x44>)
 80008ba:	f000 fe0b 	bl	80014d4 <GPIO_WriteToOutputPin>

	//Send Higher Nibble of data
	LCD_Write_Nibble(data >> 4);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	091b      	lsrs	r3, r3, #4
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f823 	bl	8000910 <LCD_Write_Nibble>

	//Send Lower Nibble of data
	LCD_Write_Nibble(data & 0x0F);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 030f 	and.w	r3, r3, #15
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f81c 	bl	8000910 <LCD_Write_Nibble>

	//Make HIGH to LOW transition on Enable Pin
	LCD_Enable();
 80008d8:	f000 f87a 	bl	80009d0 <LCD_Enable>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40020c00 	.word	0x40020c00

080008e8 <LCD_Print_String>:

void LCD_Print_String(char *message)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	do
	{
		LCD_Send_Char((uint8_t)*message++);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ffd1 	bl	80008a0 <LCD_Send_Char>

	}while(*message != '\0');
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1f4      	bne.n	80008f0 <LCD_Print_String+0x8>
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <LCD_Write_Nibble>:

static void LCD_Write_Nibble(uint8_t value)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, ((value >> 0) & 0x1));
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	461a      	mov	r2, r3
 8000924:	2103      	movs	r1, #3
 8000926:	4815      	ldr	r0, [pc, #84]	@ (800097c <LCD_Write_Nibble+0x6c>)
 8000928:	f000 fdd4 	bl	80014d4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, ((value >> 1) & 0x1));
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	085b      	lsrs	r3, r3, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	461a      	mov	r2, r3
 800093a:	2104      	movs	r1, #4
 800093c:	480f      	ldr	r0, [pc, #60]	@ (800097c <LCD_Write_Nibble+0x6c>)
 800093e:	f000 fdc9 	bl	80014d4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, ((value >> 2) & 0x1));
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	089b      	lsrs	r3, r3, #2
 8000946:	b2db      	uxtb	r3, r3
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	b2db      	uxtb	r3, r3
 800094e:	461a      	mov	r2, r3
 8000950:	2105      	movs	r1, #5
 8000952:	480a      	ldr	r0, [pc, #40]	@ (800097c <LCD_Write_Nibble+0x6c>)
 8000954:	f000 fdbe 	bl	80014d4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, ((value >> 3) & 0x1));
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	461a      	mov	r2, r3
 8000966:	2106      	movs	r1, #6
 8000968:	4804      	ldr	r0, [pc, #16]	@ (800097c <LCD_Write_Nibble+0x6c>)
 800096a:	f000 fdb3 	bl	80014d4 <GPIO_WriteToOutputPin>

	LCD_Enable();
 800096e:	f000 f82f 	bl	80009d0 <LCD_Enable>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40020c00 	.word	0x40020c00

08000980 <LCD_Set_Cursor>:
 * Set LCD Cursor to specified Location given by row and column information
 * Row Number : 1 to 2
 * Column Number : 1 to 16, Assuming a 16x2 Character Display
 */
void LCD_Set_Cursor(uint8_t row, uint8_t column)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	460a      	mov	r2, r1
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	4613      	mov	r3, r2
 800098e:	71bb      	strb	r3, [r7, #6]
	column--;
 8000990:	79bb      	ldrb	r3, [r7, #6]
 8000992:	3b01      	subs	r3, #1
 8000994:	71bb      	strb	r3, [r7, #6]
	switch(row)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d002      	beq.n	80009a2 <LCD_Set_Cursor+0x22>
 800099c:	2b02      	cmp	r3, #2
 800099e:	d009      	beq.n	80009b4 <LCD_Set_Cursor+0x34>
			break;
		case 2:
			LCD_Send_Command((column |= 0xC0));
			break;
		default:
			break;
 80009a0:	e011      	b.n	80009c6 <LCD_Set_Cursor+0x46>
			LCD_Send_Command((column |= 0x80));
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009a8:	71bb      	strb	r3, [r7, #6]
 80009aa:	79bb      	ldrb	r3, [r7, #6]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff53 	bl	8000858 <LCD_Send_Command>
			break;
 80009b2:	e008      	b.n	80009c6 <LCD_Set_Cursor+0x46>
			LCD_Send_Command((column |= 0xC0));
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80009ba:	71bb      	strb	r3, [r7, #6]
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff4a 	bl	8000858 <LCD_Send_Command>
			break;
 80009c4:	bf00      	nop
	}
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <LCD_Enable>:

static void LCD_Enable()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2102      	movs	r1, #2
 80009d8:	4807      	ldr	r0, [pc, #28]	@ (80009f8 <LCD_Enable+0x28>)
 80009da:	f000 fd7b 	bl	80014d4 <GPIO_WriteToOutputPin>
	delay_ms(10);
 80009de:	200a      	movs	r0, #10
 80009e0:	f000 f880 	bl	8000ae4 <delay_ms>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2102      	movs	r1, #2
 80009e8:	4803      	ldr	r0, [pc, #12]	@ (80009f8 <LCD_Enable+0x28>)
 80009ea:	f000 fd73 	bl	80014d4 <GPIO_WriteToOutputPin>
	delay_ms(100);
 80009ee:	2064      	movs	r0, #100	@ 0x64
 80009f0:	f000 f878 	bl	8000ae4 <delay_ms>
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40020c00 	.word	0x40020c00

080009fc <LCD_Display_Clear>:

void LCD_Display_Clear()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	LCD_Send_Command(LCD_CMD_DIS_CLEAR);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff ff29 	bl	8000858 <LCD_Send_Command>
	delay_ms(2);
 8000a06:	2002      	movs	r0, #2
 8000a08:	f000 f86c 	bl	8000ae4 <delay_ms>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <LCD_Display_Return_Home>:

void LCD_Display_Return_Home(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	LCD_Send_Command(LCD_CMD_DIS_RETURN_HOME);
 8000a14:	2002      	movs	r0, #2
 8000a16:	f7ff ff1f 	bl	8000858 <LCD_Send_Command>
	delay_ms(2);
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f000 f862 	bl	8000ae4 <delay_ms>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <LCD_GPIO_Pin_Config>:

static void LCD_GPIO_Pin_Config()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
	GPIO_Handle_t lcdPins;
	lcdPins.pGPIOx = LCD_GPIO_PORT;
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae0 <LCD_GPIO_Pin_Config+0xbc>)
 8000a2c:	607b      	str	r3, [r7, #4]
	lcdPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	727b      	strb	r3, [r7, #9]
	lcdPins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 8000a32:	2300      	movs	r3, #0
 8000a34:	733b      	strb	r3, [r7, #12]
	lcdPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a36:	2300      	movs	r3, #0
 8000a38:	72fb      	strb	r3, [r7, #11]
	lcdPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	72bb      	strb	r3, [r7, #10]

	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fbad 	bl	80011a4 <GPIO_Init>

	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 fba7 	bl	80011a4 <GPIO_Init>

	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000a56:	2302      	movs	r3, #2
 8000a58:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fba1 	bl	80011a4 <GPIO_Init>

	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000a62:	2303      	movs	r3, #3
 8000a64:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fb9b 	bl	80011a4 <GPIO_Init>

	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fb95 	bl	80011a4 <GPIO_Init>

	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fb8f 	bl	80011a4 <GPIO_Init>

	lcdPins.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000a86:	2306      	movs	r3, #6
 8000a88:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcdPins);
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fb89 	bl	80011a4 <GPIO_Init>

	//Write 0 to all LCD Pins
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	4812      	ldr	r0, [pc, #72]	@ (8000ae0 <LCD_GPIO_Pin_Config+0xbc>)
 8000a98:	f000 fd1c 	bl	80014d4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	480f      	ldr	r0, [pc, #60]	@ (8000ae0 <LCD_GPIO_Pin_Config+0xbc>)
 8000aa2:	f000 fd17 	bl	80014d4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <LCD_GPIO_Pin_Config+0xbc>)
 8000aac:	f000 fd12 	bl	80014d4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2103      	movs	r1, #3
 8000ab4:	480a      	ldr	r0, [pc, #40]	@ (8000ae0 <LCD_GPIO_Pin_Config+0xbc>)
 8000ab6:	f000 fd0d 	bl	80014d4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2104      	movs	r1, #4
 8000abe:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <LCD_GPIO_Pin_Config+0xbc>)
 8000ac0:	f000 fd08 	bl	80014d4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2105      	movs	r1, #5
 8000ac8:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <LCD_GPIO_Pin_Config+0xbc>)
 8000aca:	f000 fd03 	bl	80014d4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2106      	movs	r1, #6
 8000ad2:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <LCD_GPIO_Pin_Config+0xbc>)
 8000ad4:	f000 fcfe 	bl	80014d4 <GPIO_WriteToOutputPin>
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40020c00 	.word	0x40020c00

08000ae4 <delay_ms>:

void delay_ms(uint32_t cnt)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt * 1000); i++);
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e002      	b.n	8000af8 <delay_ms+0x14>
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000afe:	fb02 f303 	mul.w	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d3f4      	bcc.n	8000af2 <delay_ms+0xe>
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <delay_us>:

void delay_us(uint32_t cnt)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt * 1); i++);
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e002      	b.n	8000b2a <delay_us+0x14>
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3301      	adds	r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d3f8      	bcc.n	8000b24 <delay_us+0xe>
}
 8000b32:	bf00      	nop
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <RTC_DS1307_Init>:
/*
 * If this function return 1 then CH=1, init failed
 * If this function return 0 then CH=0, init success
 */
uint8_t RTC_DS1307_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	//1. Initialize I2C GPIO Pins
	RTC_DS1307_I2C_Pin_Config();
 8000b46:	f000 f927 	bl	8000d98 <RTC_DS1307_I2C_Pin_Config>

	//2. Initialize I2C Peripheral
	RTC_DS1307_I2C_Config();
 8000b4a:	f000 f961 	bl	8000e10 <RTC_DS1307_I2C_Config>

	//3. Enable I2C Peripheral
	I2C_PeripheralControl(RTC_DS1307_I2C, ENABLE);
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <RTC_DS1307_Init+0x38>)
 8000b52:	f000 fdc9 	bl	80016e8 <I2C_PeripheralControl>

	//4. Enable RTC Oscillator by making CH=0
	RTC_DS1307_Write(0x00, RTC_DS1307_ADDR_SEC);
 8000b56:	2100      	movs	r1, #0
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 f96f 	bl	8000e3c <RTC_DS1307_Write>

	//5. Read back Clock Halt(CH) bit
	uint8_t clock_state = RTC_DS1307_Read(RTC_DS1307_ADDR_SEC);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 f988 	bl	8000e74 <RTC_DS1307_Read>
 8000b64:	4603      	mov	r3, r0
 8000b66:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x1);
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	09db      	lsrs	r3, r3, #7
 8000b6c:	b2db      	uxtb	r3, r3

}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40005400 	.word	0x40005400

08000b7c <RTC_DS1307_Set_Current_Time>:

void RTC_DS1307_Set_Current_Time(RTC_Time_t *rtc_time)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	uint8_t seconds, minutes, hours;
	//convert Binary to BCD
	seconds = Binary_to_BCD(rtc_time->seconds);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f991 	bl	8000eb0 <Binary_to_BCD>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	73bb      	strb	r3, [r7, #14]

	/********** Configure Seconds Register *************/
	seconds &= ~(1 << 7);	//CH=0
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b98:	73bb      	strb	r3, [r7, #14]
	RTC_DS1307_Write(seconds, RTC_DS1307_ADDR_SEC);
 8000b9a:	7bbb      	ldrb	r3, [r7, #14]
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f94c 	bl	8000e3c <RTC_DS1307_Write>

	/********** Configure minutes Register *************/
	minutes = Binary_to_BCD(rtc_time->minutes);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	785b      	ldrb	r3, [r3, #1]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 f981 	bl	8000eb0 <Binary_to_BCD>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	737b      	strb	r3, [r7, #13]
	RTC_DS1307_Write(minutes, RTC_DS1307_ADDR_MIN);
 8000bb2:	7b7b      	ldrb	r3, [r7, #13]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f940 	bl	8000e3c <RTC_DS1307_Write>

	/********** Configure hour Register ***************/
	hours = Binary_to_BCD(rtc_time->hours);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	789b      	ldrb	r3, [r3, #2]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 f975 	bl	8000eb0 <Binary_to_BCD>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	78db      	ldrb	r3, [r3, #3]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d104      	bne.n	8000bdc <RTC_DS1307_Set_Current_Time+0x60>
	{
		//TIME_FORMAT_24HRS
		//Clear 6th bit of Hour register
		hours &= ~(1 << 6);
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e00f      	b.n	8000bfc <RTC_DS1307_Set_Current_Time+0x80>
	}
	else
	{
		//12 Hrs Format
		//Set 6th bit of Hour register
		hours |= (1 << 6);
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000be2:	73fb      	strb	r3, [r7, #15]

		if(hours == TIME_FORMAT_12HRS_PM)
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d104      	bne.n	8000bf4 <RTC_DS1307_Set_Current_Time+0x78>
		{
			//TIME_FORMAT_12HRS_PM
			//Set 5th bit of Hour register
			hours |= (1 << 5);
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	f043 0320 	orr.w	r3, r3, #32
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e003      	b.n	8000bfc <RTC_DS1307_Set_Current_Time+0x80>
		}
		else
		{
			//TIME_FORMAT_12HRS_AM
			//Clear 5th bit of Hour register
			hours &= ~(1 << 5);
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	f023 0320 	bic.w	r3, r3, #32
 8000bfa:	73fb      	strb	r3, [r7, #15]
		}
	}
	RTC_DS1307_Write(hours, RTC_DS1307_ADDR_HRS);
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f91b 	bl	8000e3c <RTC_DS1307_Write>
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <RTC_DS1307_Get_Current_Time>:

void RTC_DS1307_Get_Current_Time(RTC_Time_t *rtc_time)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b084      	sub	sp, #16
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
	uint8_t seconds, minutes, hours;

	/********** Read Seconds Register *************/
	seconds = RTC_DS1307_Read(RTC_DS1307_ADDR_SEC);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 f92c 	bl	8000e74 <RTC_DS1307_Read>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);	//CH=0
 8000c20:	7bbb      	ldrb	r3, [r7, #14]
 8000c22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c26:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = BCD_to_Binary(seconds);
 8000c28:	7bbb      	ldrb	r3, [r7, #14]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f96e 	bl	8000f0c <BCD_to_Binary>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	701a      	strb	r2, [r3, #0]

	/********** Read minutes Register *************/
	minutes = RTC_DS1307_Read(RTC_DS1307_ADDR_MIN);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f000 f91b 	bl	8000e74 <RTC_DS1307_Read>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	737b      	strb	r3, [r7, #13]
	rtc_time->minutes = BCD_to_Binary(minutes);
 8000c42:	7b7b      	ldrb	r3, [r7, #13]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f961 	bl	8000f0c <BCD_to_Binary>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	705a      	strb	r2, [r3, #1]

	/********** Read hours Register *************/
	hours = RTC_DS1307_Read(RTC_DS1307_ADDR_HRS);
 8000c52:	2002      	movs	r0, #2
 8000c54:	f000 f90e 	bl	8000e74 <RTC_DS1307_Read>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	73fb      	strb	r3, [r7, #15]

	if(hours & (1 << 6))
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d014      	beq.n	8000c90 <RTC_DS1307_Get_Current_Time+0x82>
	{
		//12 Hr Format
		if(hours & (1 << 5))
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	f003 0320 	and.w	r3, r3, #32
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <RTC_DS1307_Get_Current_Time+0x6a>
		{
			//TIME_FORMAT_12HRS_PM
			rtc_time->time_format = TIME_FORMAT_12HRS_PM;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	70da      	strb	r2, [r3, #3]
 8000c76:	e002      	b.n	8000c7e <RTC_DS1307_Get_Current_Time+0x70>
		}
		else
		{
			//TIME_FORMAT_12HRS_AM
			rtc_time->time_format = TIME_FORMAT_12HRS_AM;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	70da      	strb	r2, [r3, #3]
		}

		//clear 5th and 6th bit
		hours &= ~(1 << 5);
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	f023 0320 	bic.w	r3, r3, #32
 8000c84:	73fb      	strb	r3, [r7, #15]
		hours &= ~(1 << 6);
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000c8c:	73fb      	strb	r3, [r7, #15]
 8000c8e:	e002      	b.n	8000c96 <RTC_DS1307_Get_Current_Time+0x88>
	}
	else
	{
		//24 Hr Format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2202      	movs	r2, #2
 8000c94:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = BCD_to_Binary(hours);
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f937 	bl	8000f0c <BCD_to_Binary>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	709a      	strb	r2, [r3, #2]
}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <RTC_DS1307_Set_Current_Date>:

void RTC_DS1307_Set_Current_Date(RTC_Date_t *rtc_date)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	uint8_t day, date, month, year;

	/********** Configure day Register ***************/
	day = Binary_to_BCD(rtc_date->day);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f8f8 	bl	8000eb0 <Binary_to_BCD>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	73fb      	strb	r3, [r7, #15]
	RTC_DS1307_Write(day, RTC_DS1307_ADDR_DAY);
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	2103      	movs	r1, #3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f8b7 	bl	8000e3c <RTC_DS1307_Write>

	/********** Configure date Register ***************/
	date = Binary_to_BCD(rtc_date->date);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	785b      	ldrb	r3, [r3, #1]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f8ec 	bl	8000eb0 <Binary_to_BCD>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	73bb      	strb	r3, [r7, #14]
	RTC_DS1307_Write(date, RTC_DS1307_ADDR_DATE);
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
 8000cde:	2104      	movs	r1, #4
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f8ab 	bl	8000e3c <RTC_DS1307_Write>

	/********** Configure month Register ***************/
	month = Binary_to_BCD(rtc_date->month);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	789b      	ldrb	r3, [r3, #2]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f8e0 	bl	8000eb0 <Binary_to_BCD>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	737b      	strb	r3, [r7, #13]
	RTC_DS1307_Write(month, RTC_DS1307_ADDR_MONTH);
 8000cf4:	7b7b      	ldrb	r3, [r7, #13]
 8000cf6:	2105      	movs	r1, #5
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f89f 	bl	8000e3c <RTC_DS1307_Write>

	/********** Configure year Register ***************/
	year = Binary_to_BCD(rtc_date->year);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	78db      	ldrb	r3, [r3, #3]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f8d4 	bl	8000eb0 <Binary_to_BCD>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	733b      	strb	r3, [r7, #12]
	RTC_DS1307_Write(year, RTC_DS1307_ADDR_YEAR);
 8000d0c:	7b3b      	ldrb	r3, [r7, #12]
 8000d0e:	2106      	movs	r1, #6
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 f893 	bl	8000e3c <RTC_DS1307_Write>

}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <RTC_DS1307_Get_Current_Date>:

void RTC_DS1307_Get_Current_Date(RTC_Date_t *rtc_date)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	uint8_t day, date, month, year;

	/********** Read day Register *************/
	day = RTC_DS1307_Read(RTC_DS1307_ADDR_DAY);
 8000d26:	2003      	movs	r0, #3
 8000d28:	f000 f8a4 	bl	8000e74 <RTC_DS1307_Read>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	73fb      	strb	r3, [r7, #15]
	rtc_date->day = BCD_to_Binary(day);
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f8ea 	bl	8000f0c <BCD_to_Binary>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	701a      	strb	r2, [r3, #0]

	/********** Read date Register *************/
	date = RTC_DS1307_Read(RTC_DS1307_ADDR_DATE);
 8000d40:	2004      	movs	r0, #4
 8000d42:	f000 f897 	bl	8000e74 <RTC_DS1307_Read>
 8000d46:	4603      	mov	r3, r0
 8000d48:	73bb      	strb	r3, [r7, #14]
	rtc_date->date = BCD_to_Binary(date);
 8000d4a:	7bbb      	ldrb	r3, [r7, #14]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f8dd 	bl	8000f0c <BCD_to_Binary>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461a      	mov	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	705a      	strb	r2, [r3, #1]

	/********** Read month Register *************/
	month = RTC_DS1307_Read(RTC_DS1307_ADDR_MONTH);
 8000d5a:	2005      	movs	r0, #5
 8000d5c:	f000 f88a 	bl	8000e74 <RTC_DS1307_Read>
 8000d60:	4603      	mov	r3, r0
 8000d62:	737b      	strb	r3, [r7, #13]
	rtc_date->month = BCD_to_Binary(month);
 8000d64:	7b7b      	ldrb	r3, [r7, #13]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f8d0 	bl	8000f0c <BCD_to_Binary>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	709a      	strb	r2, [r3, #2]

	/********** Read year Register *************/
	year = RTC_DS1307_Read(RTC_DS1307_ADDR_YEAR);
 8000d74:	2006      	movs	r0, #6
 8000d76:	f000 f87d 	bl	8000e74 <RTC_DS1307_Read>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	733b      	strb	r3, [r7, #12]
	rtc_date->year = BCD_to_Binary(year);
 8000d7e:	7b3b      	ldrb	r3, [r7, #12]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f8c3 	bl	8000f0c <BCD_to_Binary>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	70da      	strb	r2, [r3, #3]
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <RTC_DS1307_I2C_Pin_Config>:

static void RTC_DS1307_I2C_Pin_Config()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda, 0, sizeof(i2c_sda));
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	220c      	movs	r2, #12
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 f840 	bl	8001e2c <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 8000dac:	463b      	mov	r3, r7
 8000dae:	220c      	movs	r2, #12
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 f83a 	bl	8001e2c <memset>

	/*
	 * I2C1_SCL => PB6 and I2C1_SDA => PB7
	*/
	i2c_sda.pGPIOx = RTC_DS1307_I2C_GPIO_PORT;
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <RTC_DS1307_I2C_Pin_Config+0x74>)
 8000dba:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = RTC_DS1307_I2C_PIN_SDA;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_OD;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = RTC_DS1307_I2C_PUPD;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 f9e3 	bl	80011a4 <GPIO_Init>

	i2c_scl.pGPIOx = RTC_DS1307_I2C_GPIO_PORT;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <RTC_DS1307_I2C_Pin_Config+0x74>)
 8000de0:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = RTC_DS1307_I2C_PIN_SCL;
 8000de2:	2306      	movs	r3, #6
 8000de4:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000de6:	2302      	movs	r3, #2
 8000de8:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000dea:	2304      	movs	r3, #4
 8000dec:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_OD;
 8000dee:	2301      	movs	r3, #1
 8000df0:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = RTC_DS1307_I2C_PUPD;
 8000df2:	2301      	movs	r3, #1
 8000df4:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000df6:	2302      	movs	r3, #2
 8000df8:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f9d1 	bl	80011a4 <GPIO_Init>

}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40020400 	.word	0x40020400

08000e10 <RTC_DS1307_I2C_Config>:

static void RTC_DS1307_I2C_Config()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = RTC_DS1307_I2C;	//I2C1
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <RTC_DS1307_I2C_Config+0x20>)
 8000e16:	4a07      	ldr	r2, [pc, #28]	@ (8000e34 <RTC_DS1307_I2C_Config+0x24>)
 8000e18:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2CConfig.I2C_ACKControl = I2C_ACK_ENABLE;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <RTC_DS1307_I2C_Config+0x20>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2CConfig.I2C_SCLSpeed = RTC_DS1307_I2C_SCL_SPEED; //SM
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <RTC_DS1307_I2C_Config+0x20>)
 8000e22:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <RTC_DS1307_I2C_Config+0x28>)
 8000e24:	605a      	str	r2, [r3, #4]
	I2C_Init(&I2C1Handle);
 8000e26:	4802      	ldr	r0, [pc, #8]	@ (8000e30 <RTC_DS1307_I2C_Config+0x20>)
 8000e28:	f000 fc7a 	bl	8001720 <I2C_Init>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200000b0 	.word	0x200000b0
 8000e34:	40005400 	.word	0x40005400
 8000e38:	000186a0 	.word	0x000186a0

08000e3c <RTC_DS1307_Write>:

static void RTC_DS1307_Write(uint8_t value, uint8_t reg_addr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	4603      	mov	r3, r0
 8000e44:	460a      	mov	r2, r1
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = value;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	733b      	strb	r3, [r7, #12]
	tx[1] = reg_addr;
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&I2C1Handle, tx, 2, RTC_DS1307_I2C_ADDR, I2C_SR_DISABLE);
 8000e54:	f107 010c 	add.w	r1, r7, #12
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2368      	movs	r3, #104	@ 0x68
 8000e5e:	2202      	movs	r2, #2
 8000e60:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <RTC_DS1307_Write+0x34>)
 8000e62:	f000 fce1 	bl	8001828 <I2C_MasterSendData>
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000b0 	.word	0x200000b0

08000e74 <RTC_DS1307_Read>:

static uint8_t RTC_DS1307_Read(uint8_t reg_addr)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	//first write register address and then read from that register address
	I2C_MasterSendData(&I2C1Handle, &reg_addr, 1, RTC_DS1307_I2C_ADDR, I2C_SR_DISABLE); //write
 8000e7e:	1df9      	adds	r1, r7, #7
 8000e80:	2300      	movs	r3, #0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2368      	movs	r3, #104	@ 0x68
 8000e86:	2201      	movs	r2, #1
 8000e88:	4808      	ldr	r0, [pc, #32]	@ (8000eac <RTC_DS1307_Read+0x38>)
 8000e8a:	f000 fccd 	bl	8001828 <I2C_MasterSendData>
	I2C_MasterReceiveData(&I2C1Handle, &data, 1, RTC_DS1307_I2C_ADDR, I2C_SR_DISABLE);	//read
 8000e8e:	f107 010f 	add.w	r1, r7, #15
 8000e92:	2300      	movs	r3, #0
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2368      	movs	r3, #104	@ 0x68
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4804      	ldr	r0, [pc, #16]	@ (8000eac <RTC_DS1307_Read+0x38>)
 8000e9c:	f000 fd29 	bl	80018f2 <I2C_MasterReceiveData>
	return data;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000b0 	.word	0x200000b0

08000eb0 <Binary_to_BCD>:

static uint8_t Binary_to_BCD(uint8_t value)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;
	uint8_t bcd;

	if(value >= 10)
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b09      	cmp	r3, #9
 8000ebe:	d919      	bls.n	8000ef4 <Binary_to_BCD+0x44>
	{
		m = value / 10;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4a11      	ldr	r2, [pc, #68]	@ (8000f08 <Binary_to_BCD+0x58>)
 8000ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	73fb      	strb	r3, [r7, #15]
		n = value % 10;
 8000ecc:	79fa      	ldrb	r2, [r7, #7]
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <Binary_to_BCD+0x58>)
 8000ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed4:	08d9      	lsrs	r1, r3, #3
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	73bb      	strb	r3, [r7, #14]
		bcd = (uint8_t)((m << 4) | n);
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	b25a      	sxtb	r2, r3
 8000eea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b25b      	sxtb	r3, r3
 8000ef2:	737b      	strb	r3, [r7, #13]
	}
	bcd = value;	//if value < 10
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	737b      	strb	r3, [r7, #13]

	return bcd;
 8000ef8:	7b7b      	ldrb	r3, [r7, #13]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	cccccccd 	.word	0xcccccccd

08000f0c <BCD_to_Binary>:

static uint8_t BCD_to_Binary(uint8_t value)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;
	uint8_t bin;

	m = (uint8_t)((value >> 4) * 10);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
	n = value & (uint8_t)0x0F;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 030f 	and.w	r3, r3, #15
 8000f2c:	73bb      	strb	r3, [r7, #14]
	bin = m + n;
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	4413      	add	r3, r2
 8000f34:	737b      	strb	r3, [r7, #13]

	return bin;
 8000f36:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};


uint32_t RCC_GetPCLK1Value(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000f4a:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <RCC_GetPCLK1Value+0x9c>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000f58:	7a7b      	ldrb	r3, [r7, #9]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d102      	bne.n	8000f64 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;		//HSI
 8000f5e:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <RCC_GetPCLK1Value+0xa0>)
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e00b      	b.n	8000f7c <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)
 8000f64:	7a7b      	ldrb	r3, [r7, #9]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d102      	bne.n	8000f70 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;		//HSE
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <RCC_GetPCLK1Value+0xa4>)
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	e005      	b.n	8000f7c <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 2)
 8000f70:	7a7b      	ldrb	r3, [r7, #9]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d102      	bne.n	8000f7c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock(); //PLL
 8000f76:	f000 f83d 	bl	8000ff4 <RCC_GetPLLOutputClock>
 8000f7a:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <RCC_GetPCLK1Value+0x9c>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000f8a:	7a3b      	ldrb	r3, [r7, #8]
 8000f8c:	2b07      	cmp	r3, #7
 8000f8e:	d802      	bhi.n	8000f96 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	72fb      	strb	r3, [r7, #11]
 8000f94:	e005      	b.n	8000fa2 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000f96:	7a3b      	ldrb	r3, [r7, #8]
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	4a14      	ldr	r2, [pc, #80]	@ (8000fec <RCC_GetPCLK1Value+0xa8>)
 8000f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa0:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <RCC_GetPCLK1Value+0x9c>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	0a9b      	lsrs	r3, r3, #10
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000fb0:	7a3b      	ldrb	r3, [r7, #8]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d802      	bhi.n	8000fbc <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	72bb      	strb	r3, [r7, #10]
 8000fba:	e004      	b.n	8000fc6 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000fbc:	7a3b      	ldrb	r3, [r7, #8]
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff0 <RCC_GetPCLK1Value+0xac>)
 8000fc2:	5cd3      	ldrb	r3, [r2, r3]
 8000fc4:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fce:	7abb      	ldrb	r3, [r7, #10]
 8000fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd4:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000fd6:	687b      	ldr	r3, [r7, #4]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	00f42400 	.word	0x00f42400
 8000fe8:	007a1200 	.word	0x007a1200
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000010 	.word	0x20000010

08000ff4 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

	return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <GPIO_PeriClockControl>:
 */

#include "stm32f446xx_gpio_driver.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d157      	bne.n	80010c6 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a59      	ldr	r2, [pc, #356]	@ (8001180 <GPIO_PeriClockControl+0x17c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d106      	bne.n	800102c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800101e:	4b59      	ldr	r3, [pc, #356]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a58      	ldr	r2, [pc, #352]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 800102a:	e0a3      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a56      	ldr	r2, [pc, #344]	@ (8001188 <GPIO_PeriClockControl+0x184>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d106      	bne.n	8001042 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8001034:	4b53      	ldr	r3, [pc, #332]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001038:	4a52      	ldr	r2, [pc, #328]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001040:	e098      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a51      	ldr	r2, [pc, #324]	@ (800118c <GPIO_PeriClockControl+0x188>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d106      	bne.n	8001058 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800104a:	4b4e      	ldr	r3, [pc, #312]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a4d      	ldr	r2, [pc, #308]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001056:	e08d      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a4d      	ldr	r2, [pc, #308]	@ (8001190 <GPIO_PeriClockControl+0x18c>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d106      	bne.n	800106e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8001060:	4b48      	ldr	r3, [pc, #288]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001064:	4a47      	ldr	r2, [pc, #284]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001066:	f043 0308 	orr.w	r3, r3, #8
 800106a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800106c:	e082      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a48      	ldr	r2, [pc, #288]	@ (8001194 <GPIO_PeriClockControl+0x190>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d106      	bne.n	8001084 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8001076:	4b43      	ldr	r3, [pc, #268]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a42      	ldr	r2, [pc, #264]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001082:	e077      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a44      	ldr	r2, [pc, #272]	@ (8001198 <GPIO_PeriClockControl+0x194>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d106      	bne.n	800109a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800108c:	4b3d      	ldr	r3, [pc, #244]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	4a3c      	ldr	r2, [pc, #240]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001092:	f043 0320 	orr.w	r3, r3, #32
 8001096:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001098:	e06c      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a3f      	ldr	r2, [pc, #252]	@ (800119c <GPIO_PeriClockControl+0x198>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d106      	bne.n	80010b0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80010a2:	4b38      	ldr	r3, [pc, #224]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a37      	ldr	r2, [pc, #220]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 80010a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010ae:	e061      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a3b      	ldr	r2, [pc, #236]	@ (80011a0 <GPIO_PeriClockControl+0x19c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d15d      	bne.n	8001174 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80010b8:	4b32      	ldr	r3, [pc, #200]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	4a31      	ldr	r2, [pc, #196]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 80010be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010c4:	e056      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001180 <GPIO_PeriClockControl+0x17c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d106      	bne.n	80010dc <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80010ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 80010d4:	f023 0301 	bic.w	r3, r3, #1
 80010d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010da:	e04b      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a2a      	ldr	r2, [pc, #168]	@ (8001188 <GPIO_PeriClockControl+0x184>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d106      	bne.n	80010f2 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80010e4:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e8:	4a26      	ldr	r2, [pc, #152]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 80010ea:	f023 0302 	bic.w	r3, r3, #2
 80010ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010f0:	e040      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a25      	ldr	r2, [pc, #148]	@ (800118c <GPIO_PeriClockControl+0x188>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d106      	bne.n	8001108 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80010fa:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001100:	f023 0304 	bic.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001106:	e035      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <GPIO_PeriClockControl+0x18c>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d106      	bne.n	800111e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001114:	4a1b      	ldr	r2, [pc, #108]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001116:	f023 0308 	bic.w	r3, r3, #8
 800111a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800111c:	e02a      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a1c      	ldr	r2, [pc, #112]	@ (8001194 <GPIO_PeriClockControl+0x190>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d106      	bne.n	8001134 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 800112c:	f023 0310 	bic.w	r3, r3, #16
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001132:	e01f      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a18      	ldr	r2, [pc, #96]	@ (8001198 <GPIO_PeriClockControl+0x194>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d106      	bne.n	800114a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	4a10      	ldr	r2, [pc, #64]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001142:	f023 0320 	bic.w	r3, r3, #32
 8001146:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001148:	e014      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a13      	ldr	r2, [pc, #76]	@ (800119c <GPIO_PeriClockControl+0x198>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d106      	bne.n	8001160 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a0b      	ldr	r2, [pc, #44]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 8001158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800115e:	e009      	b.n	8001174 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <GPIO_PeriClockControl+0x19c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d105      	bne.n	8001174 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116c:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <GPIO_PeriClockControl+0x180>)
 800116e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001172:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40020000 	.word	0x40020000
 8001184:	40023800 	.word	0x40023800
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40021400 	.word	0x40021400
 800119c:	40021800 	.word	0x40021800
 80011a0:	40021c00 	.word	0x40021c00

080011a4 <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

	//Enable GPIO Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2101      	movs	r1, #1
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff24 	bl	8001004 <GPIO_PeriClockControl>

	//1. Configure the mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	795b      	ldrb	r3, [r3, #5]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d820      	bhi.n	8001206 <GPIO_Init+0x62>
	{
		//Non-Interrupt Mode
		//Configure MODE Register
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	795b      	ldrb	r3, [r3, #5]
 80011c8:	461a      	mov	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	791b      	ldrb	r3, [r3, #4]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= (0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//Clearing MODE Register
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	4619      	mov	r1, r3
 80011e2:	2303      	movs	r3, #3
 80011e4:	408b      	lsls	r3, r1
 80011e6:	4619      	mov	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	400a      	ands	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;			//Setting Mode Register
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
		temp = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e0c1      	b.n	800138a <GPIO_Init+0x1e6>
	}
	else
	{
		//Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	2b04      	cmp	r3, #4
 800120c:	d817      	bhi.n	800123e <GPIO_Init+0x9a>
		{
			//1. Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800120e:	4b47      	ldr	r3, [pc, #284]	@ (800132c <GPIO_Init+0x188>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	7912      	ldrb	r2, [r2, #4]
 8001216:	4611      	mov	r1, r2
 8001218:	2201      	movs	r2, #1
 800121a:	408a      	lsls	r2, r1
 800121c:	4611      	mov	r1, r2
 800121e:	4a43      	ldr	r2, [pc, #268]	@ (800132c <GPIO_Init+0x188>)
 8001220:	430b      	orrs	r3, r1
 8001222:	60d3      	str	r3, [r2, #12]

			//Clear RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001224:	4b41      	ldr	r3, [pc, #260]	@ (800132c <GPIO_Init+0x188>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	7912      	ldrb	r2, [r2, #4]
 800122c:	4611      	mov	r1, r2
 800122e:	2201      	movs	r2, #1
 8001230:	408a      	lsls	r2, r1
 8001232:	43d2      	mvns	r2, r2
 8001234:	4611      	mov	r1, r2
 8001236:	4a3d      	ldr	r2, [pc, #244]	@ (800132c <GPIO_Init+0x188>)
 8001238:	400b      	ands	r3, r1
 800123a:	6093      	str	r3, [r2, #8]
 800123c:	e035      	b.n	80012aa <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	795b      	ldrb	r3, [r3, #5]
 8001242:	2b05      	cmp	r3, #5
 8001244:	d817      	bhi.n	8001276 <GPIO_Init+0xd2>
		{
			//1. Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001246:	4b39      	ldr	r3, [pc, #228]	@ (800132c <GPIO_Init+0x188>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	7912      	ldrb	r2, [r2, #4]
 800124e:	4611      	mov	r1, r2
 8001250:	2201      	movs	r2, #1
 8001252:	408a      	lsls	r2, r1
 8001254:	4611      	mov	r1, r2
 8001256:	4a35      	ldr	r2, [pc, #212]	@ (800132c <GPIO_Init+0x188>)
 8001258:	430b      	orrs	r3, r1
 800125a:	6093      	str	r3, [r2, #8]

			//Clear FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800125c:	4b33      	ldr	r3, [pc, #204]	@ (800132c <GPIO_Init+0x188>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	7912      	ldrb	r2, [r2, #4]
 8001264:	4611      	mov	r1, r2
 8001266:	2201      	movs	r2, #1
 8001268:	408a      	lsls	r2, r1
 800126a:	43d2      	mvns	r2, r2
 800126c:	4611      	mov	r1, r2
 800126e:	4a2f      	ldr	r2, [pc, #188]	@ (800132c <GPIO_Init+0x188>)
 8001270:	400b      	ands	r3, r1
 8001272:	60d3      	str	r3, [r2, #12]
 8001274:	e019      	b.n	80012aa <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	795b      	ldrb	r3, [r3, #5]
 800127a:	2b06      	cmp	r3, #6
 800127c:	d815      	bhi.n	80012aa <GPIO_Init+0x106>
		{
			//1. Configure FTSR and RSTR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800127e:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <GPIO_Init+0x188>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	7912      	ldrb	r2, [r2, #4]
 8001286:	4611      	mov	r1, r2
 8001288:	2201      	movs	r2, #1
 800128a:	408a      	lsls	r2, r1
 800128c:	4611      	mov	r1, r2
 800128e:	4a27      	ldr	r2, [pc, #156]	@ (800132c <GPIO_Init+0x188>)
 8001290:	430b      	orrs	r3, r1
 8001292:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001294:	4b25      	ldr	r3, [pc, #148]	@ (800132c <GPIO_Init+0x188>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	7912      	ldrb	r2, [r2, #4]
 800129c:	4611      	mov	r1, r2
 800129e:	2201      	movs	r2, #1
 80012a0:	408a      	lsls	r2, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	4a21      	ldr	r2, [pc, #132]	@ (800132c <GPIO_Init+0x188>)
 80012a6:	430b      	orrs	r3, r1
 80012a8:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR Register
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	791b      	ldrb	r3, [r3, #4]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	791b      	ldrb	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001330 <GPIO_Init+0x18c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d044      	beq.n	8001350 <GPIO_Init+0x1ac>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001334 <GPIO_Init+0x190>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d02b      	beq.n	8001328 <GPIO_Init+0x184>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a18      	ldr	r2, [pc, #96]	@ (8001338 <GPIO_Init+0x194>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d024      	beq.n	8001324 <GPIO_Init+0x180>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a17      	ldr	r2, [pc, #92]	@ (800133c <GPIO_Init+0x198>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d01d      	beq.n	8001320 <GPIO_Init+0x17c>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a15      	ldr	r2, [pc, #84]	@ (8001340 <GPIO_Init+0x19c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d016      	beq.n	800131c <GPIO_Init+0x178>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a14      	ldr	r2, [pc, #80]	@ (8001344 <GPIO_Init+0x1a0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00f      	beq.n	8001318 <GPIO_Init+0x174>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <GPIO_Init+0x1a4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d008      	beq.n	8001314 <GPIO_Init+0x170>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a11      	ldr	r2, [pc, #68]	@ (800134c <GPIO_Init+0x1a8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d101      	bne.n	8001310 <GPIO_Init+0x16c>
 800130c:	2307      	movs	r3, #7
 800130e:	e020      	b.n	8001352 <GPIO_Init+0x1ae>
 8001310:	2300      	movs	r3, #0
 8001312:	e01e      	b.n	8001352 <GPIO_Init+0x1ae>
 8001314:	2306      	movs	r3, #6
 8001316:	e01c      	b.n	8001352 <GPIO_Init+0x1ae>
 8001318:	2305      	movs	r3, #5
 800131a:	e01a      	b.n	8001352 <GPIO_Init+0x1ae>
 800131c:	2304      	movs	r3, #4
 800131e:	e018      	b.n	8001352 <GPIO_Init+0x1ae>
 8001320:	2303      	movs	r3, #3
 8001322:	e016      	b.n	8001352 <GPIO_Init+0x1ae>
 8001324:	2302      	movs	r3, #2
 8001326:	e014      	b.n	8001352 <GPIO_Init+0x1ae>
 8001328:	2301      	movs	r3, #1
 800132a:	e012      	b.n	8001352 <GPIO_Init+0x1ae>
 800132c:	40013c00 	.word	0x40013c00
 8001330:	40020000 	.word	0x40020000
 8001334:	40020400 	.word	0x40020400
 8001338:	40020800 	.word	0x40020800
 800133c:	40020c00 	.word	0x40020c00
 8001340:	40021000 	.word	0x40021000
 8001344:	40021400 	.word	0x40021400
 8001348:	40021800 	.word	0x40021800
 800134c:	40021c00 	.word	0x40021c00
 8001350:	2300      	movs	r3, #0
 8001352:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8001354:	4b5c      	ldr	r3, [pc, #368]	@ (80014c8 <GPIO_Init+0x324>)
 8001356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001358:	4a5b      	ldr	r2, [pc, #364]	@ (80014c8 <GPIO_Init+0x324>)
 800135a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8001360:	7c7a      	ldrb	r2, [r7, #17]
 8001362:	7cbb      	ldrb	r3, [r7, #18]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	fa02 f103 	lsl.w	r1, r2, r3
 800136a:	4a58      	ldr	r2, [pc, #352]	@ (80014cc <GPIO_Init+0x328>)
 800136c:	7cfb      	ldrb	r3, [r7, #19]
 800136e:	3302      	adds	r3, #2
 8001370:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI Interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001374:	4b56      	ldr	r3, [pc, #344]	@ (80014d0 <GPIO_Init+0x32c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	7912      	ldrb	r2, [r2, #4]
 800137c:	4611      	mov	r1, r2
 800137e:	2201      	movs	r2, #1
 8001380:	408a      	lsls	r2, r1
 8001382:	4611      	mov	r1, r2
 8001384:	4a52      	ldr	r2, [pc, #328]	@ (80014d0 <GPIO_Init+0x32c>)
 8001386:	430b      	orrs	r3, r1
 8001388:	6013      	str	r3, [r2, #0]

	}

	temp=0;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	799b      	ldrb	r3, [r3, #6]
 8001392:	461a      	mov	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= (0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//Clearing Speed Register
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	791b      	ldrb	r3, [r3, #4]
 80013aa:	4619      	mov	r1, r3
 80013ac:	2303      	movs	r3, #3
 80013ae:	408b      	lsls	r3, r1
 80013b0:	4619      	mov	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	400a      	ands	r2, r1
 80013b8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;		//Setting Speed Register
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6899      	ldr	r1, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	609a      	str	r2, [r3, #8]

	temp=0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
	//3. Configure the PuPd Settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	79db      	ldrb	r3, [r3, #7]
 80013d2:	461a      	mov	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	791b      	ldrb	r3, [r3, #4]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= (0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//Clearing Speed Register
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	791b      	ldrb	r3, [r3, #4]
 80013ea:	4619      	mov	r1, r3
 80013ec:	2303      	movs	r3, #3
 80013ee:	408b      	lsls	r3, r1
 80013f0:	4619      	mov	r1, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	400a      	ands	r2, r1
 80013f8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;			//Setting PuPd Register
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68d9      	ldr	r1, [r3, #12]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	430a      	orrs	r2, r1
 8001408:	60da      	str	r2, [r3, #12]

	temp=0;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
	//4. Configure OType settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7a1b      	ldrb	r3, [r3, #8]
 8001412:	461a      	mov	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	791b      	ldrb	r3, [r3, #4]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= (0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//Clearing OTYPE Register
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	791b      	ldrb	r3, [r3, #4]
 8001428:	4619      	mov	r1, r3
 800142a:	2301      	movs	r3, #1
 800142c:	408b      	lsls	r3, r1
 800142e:	4619      	mov	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	400a      	ands	r2, r1
 8001436:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;		//Setting OTYPE Register
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6859      	ldr	r1, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]

	temp=0;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
	//5. Configure the Alt. Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	795b      	ldrb	r3, [r3, #5]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d135      	bne.n	80014c0 <GPIO_Init+0x31c>
	{
		//Configure Alternate function Register
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	791b      	ldrb	r3, [r3, #4]
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	791b      	ldrb	r3, [r3, #4]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));	//Clearing ALTFN Register
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	7c3b      	ldrb	r3, [r7, #16]
 800146c:	3308      	adds	r3, #8
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	210f      	movs	r1, #15
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6819      	ldr	r1, [r3, #0]
 8001486:	7c3b      	ldrb	r3, [r7, #16]
 8001488:	4002      	ands	r2, r0
 800148a:	3308      	adds	r3, #8
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	7c3b      	ldrb	r3, [r7, #16]
 8001498:	3308      	adds	r3, #8
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7a5b      	ldrb	r3, [r3, #9]
 80014a4:	4619      	mov	r1, r3
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	7c3b      	ldrb	r3, [r7, #16]
 80014b6:	4302      	orrs	r2, r0
 80014b8:	3308      	adds	r3, #8
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	605a      	str	r2, [r3, #4]
	}
}
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40013800 	.word	0x40013800
 80014d0:	40013c00 	.word	0x40013c00

080014d4 <GPIO_WriteToOutputPin>:
	return value;

}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	70fb      	strb	r3, [r7, #3]
 80014e0:	4613      	mov	r3, r2
 80014e2:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 80014e4:	78bb      	ldrb	r3, [r7, #2]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d109      	bne.n	80014fe <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to GPIO_ODR at bit field corresponding to the pin number
		pGPIOx->ODR |= (1 << PinNumber);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	78fa      	ldrb	r2, [r7, #3]
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	615a      	str	r2, [r3, #20]
	else
	{
		//write 0 to GPIO_ODR at bit field corresponding to the pin number
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 80014fc:	e009      	b.n	8001512 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	78fa      	ldrb	r2, [r7, #3]
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f202 	lsl.w	r2, r1, r2
 800150a:	43d2      	mvns	r2, r2
 800150c:	401a      	ands	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	615a      	str	r2, [r3, #20]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <I2C_GenerateStartCondition>:
static void I2C_SendAddressWrite( I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_SendAddressRead( I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag( I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	601a      	str	r2, [r3, #0]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <I2C_SendAddressWrite>:

static void I2C_SendAddressWrite( I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;	//7-bit Slave Address
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);			//R/W=0
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;	//SlaveAddr + R/W
 8001578:	78fa      	ldrb	r2, [r7, #3]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	611a      	str	r2, [r3, #16]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <I2C_SendAddressRead>:

static void I2C_SendAddressRead( I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;	//7-bit Slave Address
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= (1);			//R/W=1
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;	//SlaveAddr + R/W
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	611a      	str	r2, [r3, #16]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag( I2C_RegDef_t *pI2Cx)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b085      	sub	sp, #20
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;

}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <I2C_ACKControl>:

void I2C_ACKControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d106      	bne.n	800161e <I2C_ACKControl+0x20>
	{
		//enable ACK
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	601a      	str	r2, [r3, #0]
	else
	{
		//disable ACK
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 800161c:	e005      	b.n	800162a <I2C_ACKControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	601a      	str	r2, [r3, #0]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d120      	bne.n	800168c <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a22      	ldr	r2, [pc, #136]	@ (80016d8 <I2C_PeriClockControl+0xa0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d106      	bne.n	8001660 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <I2C_PeriClockControl+0xa4>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	4a21      	ldr	r2, [pc, #132]	@ (80016dc <I2C_PeriClockControl+0xa4>)
 8001658:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800165c:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 800165e:	e035      	b.n	80016cc <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a1f      	ldr	r2, [pc, #124]	@ (80016e0 <I2C_PeriClockControl+0xa8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d106      	bne.n	8001676 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <I2C_PeriClockControl+0xa4>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	4a1b      	ldr	r2, [pc, #108]	@ (80016dc <I2C_PeriClockControl+0xa4>)
 800166e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001672:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001674:	e02a      	b.n	80016cc <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a1a      	ldr	r2, [pc, #104]	@ (80016e4 <I2C_PeriClockControl+0xac>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d126      	bne.n	80016cc <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 800167e:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <I2C_PeriClockControl+0xa4>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	4a16      	ldr	r2, [pc, #88]	@ (80016dc <I2C_PeriClockControl+0xa4>)
 8001684:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001688:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800168a:	e01f      	b.n	80016cc <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <I2C_PeriClockControl+0xa0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d106      	bne.n	80016a2 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <I2C_PeriClockControl+0xa4>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	4a10      	ldr	r2, [pc, #64]	@ (80016dc <I2C_PeriClockControl+0xa4>)
 800169a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800169e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80016a0:	e014      	b.n	80016cc <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <I2C_PeriClockControl+0xa8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d106      	bne.n	80016b8 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <I2C_PeriClockControl+0xa4>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	4a0b      	ldr	r2, [pc, #44]	@ (80016dc <I2C_PeriClockControl+0xa4>)
 80016b0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80016b4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80016b6:	e009      	b.n	80016cc <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <I2C_PeriClockControl+0xac>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d105      	bne.n	80016cc <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <I2C_PeriClockControl+0xa4>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <I2C_PeriClockControl+0xa4>)
 80016c6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80016ca:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40005400 	.word	0x40005400
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40005800 	.word	0x40005800
 80016e4:	40005c00 	.word	0x40005c00

080016e8 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d106      	bne.n	8001708 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8001706:	e005      	b.n	8001714 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 0201 	bic.w	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	601a      	str	r2, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <I2C_Init>:
 * @Note              -

 */

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]

	//Enable I2C Peripheral Clock
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2101      	movs	r1, #1
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff80 	bl	8001638 <I2C_PeriClockControl>

	/******************************** Configuration of CR1******************************************/
	tempreg |= pI2CHandle->I2CConfig.I2C_ACKControl << I2C_CR1_ACK;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7a5b      	ldrb	r3, [r3, #9]
 800173c:	029b      	lsls	r3, r3, #10
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of CR2******************************************/
	//Configure FREQ field of CR2
	tempreg = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000;		//16
 8001748:	f7ff fbfc 	bl	8000f44 <RCC_GetPCLK1Value>
 800174c:	4603      	mov	r3, r0
 800174e:	4a34      	ldr	r2, [pc, #208]	@ (8001820 <I2C_Init+0x100>)
 8001750:	fba2 2303 	umull	r2, r3, r2, r3
 8001754:	0c9b      	lsrs	r3, r3, #18
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001766:	605a      	str	r2, [r3, #4]

	/******************************** Configuration of OAR1******************************************/
	tempreg = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2CConfig.I2C_DeviceAddress << 1;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7a1b      	ldrb	r3, [r3, #8]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);						//given in RM: 14 bit set to 1 by software
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800177e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	609a      	str	r2, [r3, #8]

	/******************************** Configuration of CCR******************************************/
	//CCR Calculations
	uint16_t ccr_value;
	tempreg = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2CConfig.I2C_SCLSpeed == I2C_SCL_SPEED_SM)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a24      	ldr	r2, [pc, #144]	@ (8001824 <I2C_Init+0x104>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d10f      	bne.n	80017b6 <I2C_Init+0x96>
	{
		//standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2CConfig.I2C_SCLSpeed);
 8001796:	f7ff fbd5 	bl	8000f44 <RCC_GetPCLK1Value>
 800179a:	4602      	mov	r2, r0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	817b      	strh	r3, [r7, #10]
		tempreg |= ccr_value & 0xFFF;
 80017a8:	897b      	ldrh	r3, [r7, #10]
 80017aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e02c      	b.n	8001810 <I2C_Init+0xf0>
	}
	else
	{
		//fast mode
		tempreg |= (1 << 15);	//fast mode
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017bc:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2CConfig.I2C_FMDutyCycle << 14);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7a9b      	ldrb	r3, [r3, #10]
 80017c2:	039b      	lsls	r3, r3, #14
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2CConfig.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7a9b      	ldrb	r3, [r3, #10]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10b      	bne.n	80017ea <I2C_Init+0xca>
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2CConfig.I2C_SCLSpeed);
 80017d2:	f7ff fbb7 	bl	8000f44 <RCC_GetPCLK1Value>
 80017d6:	4601      	mov	r1, r0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e6:	817b      	strh	r3, [r7, #10]
 80017e8:	e00c      	b.n	8001804 <I2C_Init+0xe4>
		}
		else
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2CConfig.I2C_SCLSpeed);
 80017ea:	f7ff fbab 	bl	8000f44 <RCC_GetPCLK1Value>
 80017ee:	4601      	mov	r1, r0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	009a      	lsls	r2, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001802:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccr_value & 0xFFF;
 8001804:	897b      	ldrh	r3, [r7, #10]
 8001806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	61da      	str	r2, [r3, #28]
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	431bde83 	.word	0x431bde83
 8001824:	000186a0 	.word	0x000186a0

08001828 <I2C_MasterSendData>:
 * @Note              -

 */

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	70fb      	strb	r3, [r7, #3]
	//1. Generate START Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fe6f 	bl	800151e <I2C_GenerateStartCondition>

	//2. Confirm the START generatioj by checking SB flag in SR
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 8001840:	bf00      	nop
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2101      	movs	r1, #1
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fec4 	bl	80015d6 <I2C_GetFlagStatus>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f6      	beq.n	8001842 <I2C_MasterSendData+0x1a>

	//SB is cleared by reading SR and writing to DR
	//3. send the address of slave with R/W bit set to 0
	I2C_SendAddressWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	78fa      	ldrb	r2, [r7, #3]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fe7e 	bl	800155e <I2C_SendAddressWrite>

	//4. Confirm the Address is sent by checking ADDR Flag in SR1
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) );
 8001862:	bf00      	nop
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2102      	movs	r1, #2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff feb3 	bl	80015d6 <I2C_GetFlagStatus>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f6      	beq.n	8001864 <I2C_MasterSendData+0x3c>

	//5. ADDR flag is cleared by SR1 followed by SR2
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fe9b 	bl	80015b6 <I2C_ClearADDRFlag>

	//6. Send data until length becomes 0
	while(Len > 0)
 8001880:	e014      	b.n	80018ac <I2C_MasterSendData+0x84>
	{
		//wait until TxE flag is set
		while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)));
 8001882:	bf00      	nop
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2180      	movs	r1, #128	@ 0x80
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fea3 	bl	80015d6 <I2C_GetFlagStatus>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f6      	beq.n	8001884 <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	3301      	adds	r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
		Len--;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1e7      	bne.n	8001882 <I2C_MasterSendData+0x5a>
	}

	//7. When Len becomes zero, wait for TXE=1 and BTF=1 before generating STOP Condition
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)));
 80018b2:	bf00      	nop
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2180      	movs	r1, #128	@ 0x80
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe8b 	bl	80015d6 <I2C_GetFlagStatus>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f6      	beq.n	80018b4 <I2C_MasterSendData+0x8c>

	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)));
 80018c6:	bf00      	nop
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2104      	movs	r1, #4
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fe81 	bl	80015d6 <I2C_GetFlagStatus>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f6      	beq.n	80018c8 <I2C_MasterSendData+0xa0>

	//8. Generate STOP Condition
	if(Sr == I2C_SR_DISABLE)
 80018da:	7e3b      	ldrb	r3, [r7, #24]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d104      	bne.n	80018ea <I2C_MasterSendData+0xc2>
	{
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fe2a 	bl	800153e <I2C_GenerateStopCondition>
	}
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	70fb      	strb	r3, [r7, #3]
	//1. Generate START Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fe0a 	bl	800151e <I2C_GenerateStartCondition>

	//2. Confirm the START generatioj by checking SB flag in SR
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 800190a:	bf00      	nop
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fe5f 	bl	80015d6 <I2C_GetFlagStatus>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f6      	beq.n	800190c <I2C_MasterReceiveData+0x1a>

	//SB is cleared by reading SR and writing to DR
	//3. send the address of slave with R/W bit set to 0
	I2C_SendAddressRead(pI2CHandle->pI2Cx, SlaveAddr);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fe2f 	bl	800158a <I2C_SendAddressRead>

	//4. Confirm the Address is sent by checking ADDR Flag in SR1
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) );
 800192c:	bf00      	nop
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2102      	movs	r1, #2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fe4e 	bl	80015d6 <I2C_GetFlagStatus>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f6      	beq.n	800192e <I2C_MasterReceiveData+0x3c>

	//procedure to read only one byte
	if(Len == 1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d123      	bne.n	800198e <I2C_MasterReceiveData+0x9c>
	{
		//Disable ACKing
		I2C_ACKControl(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fe56 	bl	80015fe <I2C_ACKControl>

		//clear ADDR Flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fe2d 	bl	80015b6 <I2C_ClearADDRFlag>

		//wait until RxNE flag is set
		while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)));
 800195c:	bf00      	nop
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2140      	movs	r1, #64	@ 0x40
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fe36 	bl	80015d6 <I2C_GetFlagStatus>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f6      	beq.n	800195e <I2C_MasterReceiveData+0x6c>

		if(Sr == I2C_SR_DISABLE)
 8001970:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d104      	bne.n	8001982 <I2C_MasterReceiveData+0x90>
		{
			//generate stop condition
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fdde 	bl	800153e <I2C_GenerateStopCondition>
		}

		//read the data from DR into buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	701a      	strb	r2, [r3, #0]
	}

	//procedure to read more than one byte
	if(Len > 1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d932      	bls.n	80019fa <I2C_MasterReceiveData+0x108>
	{
		//clear ADDR Flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fe0c 	bl	80015b6 <I2C_ClearADDRFlag>

		//read data until Len becomes zero
		for(uint32_t i=Len; i > 0; i--)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e027      	b.n	80019f4 <I2C_MasterReceiveData+0x102>
		{
			//wait until RxNE flag is set
			while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)));
 80019a4:	bf00      	nop
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2140      	movs	r1, #64	@ 0x40
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fe12 	bl	80015d6 <I2C_GetFlagStatus>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f6      	beq.n	80019a6 <I2C_MasterReceiveData+0xb4>

			if(i==2)	//if last 2 byte are remaining
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d10e      	bne.n	80019dc <I2C_MasterReceiveData+0xea>
			{
				//Clear ACK bit i.e. Disable ACK, ACK=0 i.e send NACK
				I2C_ACKControl(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fe1a 	bl	80015fe <I2C_ACKControl>

				if(Sr == I2C_SR_DISABLE)
 80019ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d104      	bne.n	80019dc <I2C_MasterReceiveData+0xea>
				{
					//Generate STOP Condition
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fdb1 	bl	800153e <I2C_GenerateStopCondition>
				}
			}

			//read the data from DR into buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	701a      	strb	r2, [r3, #0]

			//increment buffer address
			pRxBuffer++;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	3301      	adds	r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
		for(uint32_t i=Len; i > 0; i--)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1d4      	bne.n	80019a4 <I2C_MasterReceiveData+0xb2>
		}
	}

	if(pI2CHandle->I2CConfig.I2C_ACKControl == I2C_ACK_ENABLE)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	7a5b      	ldrb	r3, [r3, #9]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d105      	bne.n	8001a0e <I2C_MasterReceiveData+0x11c>
	{
		//Re-Enable ACKing
		I2C_ACKControl(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2101      	movs	r1, #1
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fdf8 	bl	80015fe <I2C_ACKControl>
	}
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <std>:
 8001a18:	2300      	movs	r3, #0
 8001a1a:	b510      	push	{r4, lr}
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8001a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a26:	6083      	str	r3, [r0, #8]
 8001a28:	8181      	strh	r1, [r0, #12]
 8001a2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001a2c:	81c2      	strh	r2, [r0, #14]
 8001a2e:	6183      	str	r3, [r0, #24]
 8001a30:	4619      	mov	r1, r3
 8001a32:	2208      	movs	r2, #8
 8001a34:	305c      	adds	r0, #92	@ 0x5c
 8001a36:	f000 f9f9 	bl	8001e2c <memset>
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a70 <std+0x58>)
 8001a3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <std+0x5c>)
 8001a40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001a42:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <std+0x60>)
 8001a44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <std+0x64>)
 8001a48:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <std+0x68>)
 8001a4c:	6224      	str	r4, [r4, #32]
 8001a4e:	429c      	cmp	r4, r3
 8001a50:	d006      	beq.n	8001a60 <std+0x48>
 8001a52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001a56:	4294      	cmp	r4, r2
 8001a58:	d002      	beq.n	8001a60 <std+0x48>
 8001a5a:	33d0      	adds	r3, #208	@ 0xd0
 8001a5c:	429c      	cmp	r4, r3
 8001a5e:	d105      	bne.n	8001a6c <std+0x54>
 8001a60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a68:	f000 ba58 	b.w	8001f1c <__retarget_lock_init_recursive>
 8001a6c:	bd10      	pop	{r4, pc}
 8001a6e:	bf00      	nop
 8001a70:	08001c7d 	.word	0x08001c7d
 8001a74:	08001c9f 	.word	0x08001c9f
 8001a78:	08001cd7 	.word	0x08001cd7
 8001a7c:	08001cfb 	.word	0x08001cfb
 8001a80:	200000bc 	.word	0x200000bc

08001a84 <stdio_exit_handler>:
 8001a84:	4a02      	ldr	r2, [pc, #8]	@ (8001a90 <stdio_exit_handler+0xc>)
 8001a86:	4903      	ldr	r1, [pc, #12]	@ (8001a94 <stdio_exit_handler+0x10>)
 8001a88:	4803      	ldr	r0, [pc, #12]	@ (8001a98 <stdio_exit_handler+0x14>)
 8001a8a:	f000 b869 	b.w	8001b60 <_fwalk_sglue>
 8001a8e:	bf00      	nop
 8001a90:	20000014 	.word	0x20000014
 8001a94:	080027b9 	.word	0x080027b9
 8001a98:	20000024 	.word	0x20000024

08001a9c <cleanup_stdio>:
 8001a9c:	6841      	ldr	r1, [r0, #4]
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <cleanup_stdio+0x34>)
 8001aa0:	4299      	cmp	r1, r3
 8001aa2:	b510      	push	{r4, lr}
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	d001      	beq.n	8001aac <cleanup_stdio+0x10>
 8001aa8:	f000 fe86 	bl	80027b8 <_fflush_r>
 8001aac:	68a1      	ldr	r1, [r4, #8]
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <cleanup_stdio+0x38>)
 8001ab0:	4299      	cmp	r1, r3
 8001ab2:	d002      	beq.n	8001aba <cleanup_stdio+0x1e>
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f000 fe7f 	bl	80027b8 <_fflush_r>
 8001aba:	68e1      	ldr	r1, [r4, #12]
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <cleanup_stdio+0x3c>)
 8001abe:	4299      	cmp	r1, r3
 8001ac0:	d004      	beq.n	8001acc <cleanup_stdio+0x30>
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ac8:	f000 be76 	b.w	80027b8 <_fflush_r>
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	200000bc 	.word	0x200000bc
 8001ad4:	20000124 	.word	0x20000124
 8001ad8:	2000018c 	.word	0x2000018c

08001adc <global_stdio_init.part.0>:
 8001adc:	b510      	push	{r4, lr}
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <global_stdio_init.part.0+0x30>)
 8001ae0:	4c0b      	ldr	r4, [pc, #44]	@ (8001b10 <global_stdio_init.part.0+0x34>)
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8001b14 <global_stdio_init.part.0+0x38>)
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2104      	movs	r1, #4
 8001aec:	f7ff ff94 	bl	8001a18 <std>
 8001af0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001af4:	2201      	movs	r2, #1
 8001af6:	2109      	movs	r1, #9
 8001af8:	f7ff ff8e 	bl	8001a18 <std>
 8001afc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001b00:	2202      	movs	r2, #2
 8001b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b06:	2112      	movs	r1, #18
 8001b08:	f7ff bf86 	b.w	8001a18 <std>
 8001b0c:	200001f4 	.word	0x200001f4
 8001b10:	200000bc 	.word	0x200000bc
 8001b14:	08001a85 	.word	0x08001a85

08001b18 <__sfp_lock_acquire>:
 8001b18:	4801      	ldr	r0, [pc, #4]	@ (8001b20 <__sfp_lock_acquire+0x8>)
 8001b1a:	f000 ba00 	b.w	8001f1e <__retarget_lock_acquire_recursive>
 8001b1e:	bf00      	nop
 8001b20:	200001fd 	.word	0x200001fd

08001b24 <__sfp_lock_release>:
 8001b24:	4801      	ldr	r0, [pc, #4]	@ (8001b2c <__sfp_lock_release+0x8>)
 8001b26:	f000 b9fb 	b.w	8001f20 <__retarget_lock_release_recursive>
 8001b2a:	bf00      	nop
 8001b2c:	200001fd 	.word	0x200001fd

08001b30 <__sinit>:
 8001b30:	b510      	push	{r4, lr}
 8001b32:	4604      	mov	r4, r0
 8001b34:	f7ff fff0 	bl	8001b18 <__sfp_lock_acquire>
 8001b38:	6a23      	ldr	r3, [r4, #32]
 8001b3a:	b11b      	cbz	r3, 8001b44 <__sinit+0x14>
 8001b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b40:	f7ff bff0 	b.w	8001b24 <__sfp_lock_release>
 8001b44:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <__sinit+0x28>)
 8001b46:	6223      	str	r3, [r4, #32]
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <__sinit+0x2c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f5      	bne.n	8001b3c <__sinit+0xc>
 8001b50:	f7ff ffc4 	bl	8001adc <global_stdio_init.part.0>
 8001b54:	e7f2      	b.n	8001b3c <__sinit+0xc>
 8001b56:	bf00      	nop
 8001b58:	08001a9d 	.word	0x08001a9d
 8001b5c:	200001f4 	.word	0x200001f4

08001b60 <_fwalk_sglue>:
 8001b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b64:	4607      	mov	r7, r0
 8001b66:	4688      	mov	r8, r1
 8001b68:	4614      	mov	r4, r2
 8001b6a:	2600      	movs	r6, #0
 8001b6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b70:	f1b9 0901 	subs.w	r9, r9, #1
 8001b74:	d505      	bpl.n	8001b82 <_fwalk_sglue+0x22>
 8001b76:	6824      	ldr	r4, [r4, #0]
 8001b78:	2c00      	cmp	r4, #0
 8001b7a:	d1f7      	bne.n	8001b6c <_fwalk_sglue+0xc>
 8001b7c:	4630      	mov	r0, r6
 8001b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b82:	89ab      	ldrh	r3, [r5, #12]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d907      	bls.n	8001b98 <_fwalk_sglue+0x38>
 8001b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	d003      	beq.n	8001b98 <_fwalk_sglue+0x38>
 8001b90:	4629      	mov	r1, r5
 8001b92:	4638      	mov	r0, r7
 8001b94:	47c0      	blx	r8
 8001b96:	4306      	orrs	r6, r0
 8001b98:	3568      	adds	r5, #104	@ 0x68
 8001b9a:	e7e9      	b.n	8001b70 <_fwalk_sglue+0x10>

08001b9c <iprintf>:
 8001b9c:	b40f      	push	{r0, r1, r2, r3}
 8001b9e:	b507      	push	{r0, r1, r2, lr}
 8001ba0:	4906      	ldr	r1, [pc, #24]	@ (8001bbc <iprintf+0x20>)
 8001ba2:	ab04      	add	r3, sp, #16
 8001ba4:	6808      	ldr	r0, [r1, #0]
 8001ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8001baa:	6881      	ldr	r1, [r0, #8]
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	f000 fadb 	bl	8002168 <_vfiprintf_r>
 8001bb2:	b003      	add	sp, #12
 8001bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bb8:	b004      	add	sp, #16
 8001bba:	4770      	bx	lr
 8001bbc:	20000020 	.word	0x20000020

08001bc0 <_puts_r>:
 8001bc0:	6a03      	ldr	r3, [r0, #32]
 8001bc2:	b570      	push	{r4, r5, r6, lr}
 8001bc4:	6884      	ldr	r4, [r0, #8]
 8001bc6:	4605      	mov	r5, r0
 8001bc8:	460e      	mov	r6, r1
 8001bca:	b90b      	cbnz	r3, 8001bd0 <_puts_r+0x10>
 8001bcc:	f7ff ffb0 	bl	8001b30 <__sinit>
 8001bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001bd2:	07db      	lsls	r3, r3, #31
 8001bd4:	d405      	bmi.n	8001be2 <_puts_r+0x22>
 8001bd6:	89a3      	ldrh	r3, [r4, #12]
 8001bd8:	0598      	lsls	r0, r3, #22
 8001bda:	d402      	bmi.n	8001be2 <_puts_r+0x22>
 8001bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bde:	f000 f99e 	bl	8001f1e <__retarget_lock_acquire_recursive>
 8001be2:	89a3      	ldrh	r3, [r4, #12]
 8001be4:	0719      	lsls	r1, r3, #28
 8001be6:	d502      	bpl.n	8001bee <_puts_r+0x2e>
 8001be8:	6923      	ldr	r3, [r4, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d135      	bne.n	8001c5a <_puts_r+0x9a>
 8001bee:	4621      	mov	r1, r4
 8001bf0:	4628      	mov	r0, r5
 8001bf2:	f000 f8c5 	bl	8001d80 <__swsetup_r>
 8001bf6:	b380      	cbz	r0, 8001c5a <_puts_r+0x9a>
 8001bf8:	f04f 35ff 	mov.w	r5, #4294967295
 8001bfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001bfe:	07da      	lsls	r2, r3, #31
 8001c00:	d405      	bmi.n	8001c0e <_puts_r+0x4e>
 8001c02:	89a3      	ldrh	r3, [r4, #12]
 8001c04:	059b      	lsls	r3, r3, #22
 8001c06:	d402      	bmi.n	8001c0e <_puts_r+0x4e>
 8001c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c0a:	f000 f989 	bl	8001f20 <__retarget_lock_release_recursive>
 8001c0e:	4628      	mov	r0, r5
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da04      	bge.n	8001c20 <_puts_r+0x60>
 8001c16:	69a2      	ldr	r2, [r4, #24]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dc17      	bgt.n	8001c4c <_puts_r+0x8c>
 8001c1c:	290a      	cmp	r1, #10
 8001c1e:	d015      	beq.n	8001c4c <_puts_r+0x8c>
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	6022      	str	r2, [r4, #0]
 8001c26:	7019      	strb	r1, [r3, #0]
 8001c28:	68a3      	ldr	r3, [r4, #8]
 8001c2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	60a3      	str	r3, [r4, #8]
 8001c32:	2900      	cmp	r1, #0
 8001c34:	d1ed      	bne.n	8001c12 <_puts_r+0x52>
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	da11      	bge.n	8001c5e <_puts_r+0x9e>
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	210a      	movs	r1, #10
 8001c3e:	4628      	mov	r0, r5
 8001c40:	f000 f85f 	bl	8001d02 <__swbuf_r>
 8001c44:	3001      	adds	r0, #1
 8001c46:	d0d7      	beq.n	8001bf8 <_puts_r+0x38>
 8001c48:	250a      	movs	r5, #10
 8001c4a:	e7d7      	b.n	8001bfc <_puts_r+0x3c>
 8001c4c:	4622      	mov	r2, r4
 8001c4e:	4628      	mov	r0, r5
 8001c50:	f000 f857 	bl	8001d02 <__swbuf_r>
 8001c54:	3001      	adds	r0, #1
 8001c56:	d1e7      	bne.n	8001c28 <_puts_r+0x68>
 8001c58:	e7ce      	b.n	8001bf8 <_puts_r+0x38>
 8001c5a:	3e01      	subs	r6, #1
 8001c5c:	e7e4      	b.n	8001c28 <_puts_r+0x68>
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	6022      	str	r2, [r4, #0]
 8001c64:	220a      	movs	r2, #10
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	e7ee      	b.n	8001c48 <_puts_r+0x88>
	...

08001c6c <puts>:
 8001c6c:	4b02      	ldr	r3, [pc, #8]	@ (8001c78 <puts+0xc>)
 8001c6e:	4601      	mov	r1, r0
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	f7ff bfa5 	b.w	8001bc0 <_puts_r>
 8001c76:	bf00      	nop
 8001c78:	20000020 	.word	0x20000020

08001c7c <__sread>:
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	460c      	mov	r4, r1
 8001c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c84:	f000 f8fc 	bl	8001e80 <_read_r>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	bfab      	itete	ge
 8001c8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8001c90:	181b      	addge	r3, r3, r0
 8001c92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001c96:	bfac      	ite	ge
 8001c98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001c9a:	81a3      	strhlt	r3, [r4, #12]
 8001c9c:	bd10      	pop	{r4, pc}

08001c9e <__swrite>:
 8001c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ca2:	461f      	mov	r7, r3
 8001ca4:	898b      	ldrh	r3, [r1, #12]
 8001ca6:	05db      	lsls	r3, r3, #23
 8001ca8:	4605      	mov	r5, r0
 8001caa:	460c      	mov	r4, r1
 8001cac:	4616      	mov	r6, r2
 8001cae:	d505      	bpl.n	8001cbc <__swrite+0x1e>
 8001cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f000 f8d0 	bl	8001e5c <_lseek_r>
 8001cbc:	89a3      	ldrh	r3, [r4, #12]
 8001cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cc6:	81a3      	strh	r3, [r4, #12]
 8001cc8:	4632      	mov	r2, r6
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4628      	mov	r0, r5
 8001cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd2:	f000 b8e7 	b.w	8001ea4 <_write_r>

08001cd6 <__sseek>:
 8001cd6:	b510      	push	{r4, lr}
 8001cd8:	460c      	mov	r4, r1
 8001cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cde:	f000 f8bd 	bl	8001e5c <_lseek_r>
 8001ce2:	1c43      	adds	r3, r0, #1
 8001ce4:	89a3      	ldrh	r3, [r4, #12]
 8001ce6:	bf15      	itete	ne
 8001ce8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001cea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001cee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001cf2:	81a3      	strheq	r3, [r4, #12]
 8001cf4:	bf18      	it	ne
 8001cf6:	81a3      	strhne	r3, [r4, #12]
 8001cf8:	bd10      	pop	{r4, pc}

08001cfa <__sclose>:
 8001cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cfe:	f000 b89d 	b.w	8001e3c <_close_r>

08001d02 <__swbuf_r>:
 8001d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d04:	460e      	mov	r6, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	4605      	mov	r5, r0
 8001d0a:	b118      	cbz	r0, 8001d14 <__swbuf_r+0x12>
 8001d0c:	6a03      	ldr	r3, [r0, #32]
 8001d0e:	b90b      	cbnz	r3, 8001d14 <__swbuf_r+0x12>
 8001d10:	f7ff ff0e 	bl	8001b30 <__sinit>
 8001d14:	69a3      	ldr	r3, [r4, #24]
 8001d16:	60a3      	str	r3, [r4, #8]
 8001d18:	89a3      	ldrh	r3, [r4, #12]
 8001d1a:	071a      	lsls	r2, r3, #28
 8001d1c:	d501      	bpl.n	8001d22 <__swbuf_r+0x20>
 8001d1e:	6923      	ldr	r3, [r4, #16]
 8001d20:	b943      	cbnz	r3, 8001d34 <__swbuf_r+0x32>
 8001d22:	4621      	mov	r1, r4
 8001d24:	4628      	mov	r0, r5
 8001d26:	f000 f82b 	bl	8001d80 <__swsetup_r>
 8001d2a:	b118      	cbz	r0, 8001d34 <__swbuf_r+0x32>
 8001d2c:	f04f 37ff 	mov.w	r7, #4294967295
 8001d30:	4638      	mov	r0, r7
 8001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	6922      	ldr	r2, [r4, #16]
 8001d38:	1a98      	subs	r0, r3, r2
 8001d3a:	6963      	ldr	r3, [r4, #20]
 8001d3c:	b2f6      	uxtb	r6, r6
 8001d3e:	4283      	cmp	r3, r0
 8001d40:	4637      	mov	r7, r6
 8001d42:	dc05      	bgt.n	8001d50 <__swbuf_r+0x4e>
 8001d44:	4621      	mov	r1, r4
 8001d46:	4628      	mov	r0, r5
 8001d48:	f000 fd36 	bl	80027b8 <_fflush_r>
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	d1ed      	bne.n	8001d2c <__swbuf_r+0x2a>
 8001d50:	68a3      	ldr	r3, [r4, #8]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	60a3      	str	r3, [r4, #8]
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	6022      	str	r2, [r4, #0]
 8001d5c:	701e      	strb	r6, [r3, #0]
 8001d5e:	6962      	ldr	r2, [r4, #20]
 8001d60:	1c43      	adds	r3, r0, #1
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d004      	beq.n	8001d70 <__swbuf_r+0x6e>
 8001d66:	89a3      	ldrh	r3, [r4, #12]
 8001d68:	07db      	lsls	r3, r3, #31
 8001d6a:	d5e1      	bpl.n	8001d30 <__swbuf_r+0x2e>
 8001d6c:	2e0a      	cmp	r6, #10
 8001d6e:	d1df      	bne.n	8001d30 <__swbuf_r+0x2e>
 8001d70:	4621      	mov	r1, r4
 8001d72:	4628      	mov	r0, r5
 8001d74:	f000 fd20 	bl	80027b8 <_fflush_r>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d0d9      	beq.n	8001d30 <__swbuf_r+0x2e>
 8001d7c:	e7d6      	b.n	8001d2c <__swbuf_r+0x2a>
	...

08001d80 <__swsetup_r>:
 8001d80:	b538      	push	{r3, r4, r5, lr}
 8001d82:	4b29      	ldr	r3, [pc, #164]	@ (8001e28 <__swsetup_r+0xa8>)
 8001d84:	4605      	mov	r5, r0
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	460c      	mov	r4, r1
 8001d8a:	b118      	cbz	r0, 8001d94 <__swsetup_r+0x14>
 8001d8c:	6a03      	ldr	r3, [r0, #32]
 8001d8e:	b90b      	cbnz	r3, 8001d94 <__swsetup_r+0x14>
 8001d90:	f7ff fece 	bl	8001b30 <__sinit>
 8001d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d98:	0719      	lsls	r1, r3, #28
 8001d9a:	d422      	bmi.n	8001de2 <__swsetup_r+0x62>
 8001d9c:	06da      	lsls	r2, r3, #27
 8001d9e:	d407      	bmi.n	8001db0 <__swsetup_r+0x30>
 8001da0:	2209      	movs	r2, #9
 8001da2:	602a      	str	r2, [r5, #0]
 8001da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001da8:	81a3      	strh	r3, [r4, #12]
 8001daa:	f04f 30ff 	mov.w	r0, #4294967295
 8001dae:	e033      	b.n	8001e18 <__swsetup_r+0x98>
 8001db0:	0758      	lsls	r0, r3, #29
 8001db2:	d512      	bpl.n	8001dda <__swsetup_r+0x5a>
 8001db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001db6:	b141      	cbz	r1, 8001dca <__swsetup_r+0x4a>
 8001db8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001dbc:	4299      	cmp	r1, r3
 8001dbe:	d002      	beq.n	8001dc6 <__swsetup_r+0x46>
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	f000 f8af 	bl	8001f24 <_free_r>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8001dca:	89a3      	ldrh	r3, [r4, #12]
 8001dcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001dd0:	81a3      	strh	r3, [r4, #12]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	6063      	str	r3, [r4, #4]
 8001dd6:	6923      	ldr	r3, [r4, #16]
 8001dd8:	6023      	str	r3, [r4, #0]
 8001dda:	89a3      	ldrh	r3, [r4, #12]
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	81a3      	strh	r3, [r4, #12]
 8001de2:	6923      	ldr	r3, [r4, #16]
 8001de4:	b94b      	cbnz	r3, 8001dfa <__swsetup_r+0x7a>
 8001de6:	89a3      	ldrh	r3, [r4, #12]
 8001de8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001df0:	d003      	beq.n	8001dfa <__swsetup_r+0x7a>
 8001df2:	4621      	mov	r1, r4
 8001df4:	4628      	mov	r0, r5
 8001df6:	f000 fd2d 	bl	8002854 <__smakebuf_r>
 8001dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dfe:	f013 0201 	ands.w	r2, r3, #1
 8001e02:	d00a      	beq.n	8001e1a <__swsetup_r+0x9a>
 8001e04:	2200      	movs	r2, #0
 8001e06:	60a2      	str	r2, [r4, #8]
 8001e08:	6962      	ldr	r2, [r4, #20]
 8001e0a:	4252      	negs	r2, r2
 8001e0c:	61a2      	str	r2, [r4, #24]
 8001e0e:	6922      	ldr	r2, [r4, #16]
 8001e10:	b942      	cbnz	r2, 8001e24 <__swsetup_r+0xa4>
 8001e12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001e16:	d1c5      	bne.n	8001da4 <__swsetup_r+0x24>
 8001e18:	bd38      	pop	{r3, r4, r5, pc}
 8001e1a:	0799      	lsls	r1, r3, #30
 8001e1c:	bf58      	it	pl
 8001e1e:	6962      	ldrpl	r2, [r4, #20]
 8001e20:	60a2      	str	r2, [r4, #8]
 8001e22:	e7f4      	b.n	8001e0e <__swsetup_r+0x8e>
 8001e24:	2000      	movs	r0, #0
 8001e26:	e7f7      	b.n	8001e18 <__swsetup_r+0x98>
 8001e28:	20000020 	.word	0x20000020

08001e2c <memset>:
 8001e2c:	4402      	add	r2, r0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d100      	bne.n	8001e36 <memset+0xa>
 8001e34:	4770      	bx	lr
 8001e36:	f803 1b01 	strb.w	r1, [r3], #1
 8001e3a:	e7f9      	b.n	8001e30 <memset+0x4>

08001e3c <_close_r>:
 8001e3c:	b538      	push	{r3, r4, r5, lr}
 8001e3e:	4d06      	ldr	r5, [pc, #24]	@ (8001e58 <_close_r+0x1c>)
 8001e40:	2300      	movs	r3, #0
 8001e42:	4604      	mov	r4, r0
 8001e44:	4608      	mov	r0, r1
 8001e46:	602b      	str	r3, [r5, #0]
 8001e48:	f7fe fc3f 	bl	80006ca <_close>
 8001e4c:	1c43      	adds	r3, r0, #1
 8001e4e:	d102      	bne.n	8001e56 <_close_r+0x1a>
 8001e50:	682b      	ldr	r3, [r5, #0]
 8001e52:	b103      	cbz	r3, 8001e56 <_close_r+0x1a>
 8001e54:	6023      	str	r3, [r4, #0]
 8001e56:	bd38      	pop	{r3, r4, r5, pc}
 8001e58:	200001f8 	.word	0x200001f8

08001e5c <_lseek_r>:
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	4d07      	ldr	r5, [pc, #28]	@ (8001e7c <_lseek_r+0x20>)
 8001e60:	4604      	mov	r4, r0
 8001e62:	4608      	mov	r0, r1
 8001e64:	4611      	mov	r1, r2
 8001e66:	2200      	movs	r2, #0
 8001e68:	602a      	str	r2, [r5, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f7fe fc54 	bl	8000718 <_lseek>
 8001e70:	1c43      	adds	r3, r0, #1
 8001e72:	d102      	bne.n	8001e7a <_lseek_r+0x1e>
 8001e74:	682b      	ldr	r3, [r5, #0]
 8001e76:	b103      	cbz	r3, 8001e7a <_lseek_r+0x1e>
 8001e78:	6023      	str	r3, [r4, #0]
 8001e7a:	bd38      	pop	{r3, r4, r5, pc}
 8001e7c:	200001f8 	.word	0x200001f8

08001e80 <_read_r>:
 8001e80:	b538      	push	{r3, r4, r5, lr}
 8001e82:	4d07      	ldr	r5, [pc, #28]	@ (8001ea0 <_read_r+0x20>)
 8001e84:	4604      	mov	r4, r0
 8001e86:	4608      	mov	r0, r1
 8001e88:	4611      	mov	r1, r2
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	602a      	str	r2, [r5, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f7fe fbe2 	bl	8000658 <_read>
 8001e94:	1c43      	adds	r3, r0, #1
 8001e96:	d102      	bne.n	8001e9e <_read_r+0x1e>
 8001e98:	682b      	ldr	r3, [r5, #0]
 8001e9a:	b103      	cbz	r3, 8001e9e <_read_r+0x1e>
 8001e9c:	6023      	str	r3, [r4, #0]
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ea0:	200001f8 	.word	0x200001f8

08001ea4 <_write_r>:
 8001ea4:	b538      	push	{r3, r4, r5, lr}
 8001ea6:	4d07      	ldr	r5, [pc, #28]	@ (8001ec4 <_write_r+0x20>)
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	4608      	mov	r0, r1
 8001eac:	4611      	mov	r1, r2
 8001eae:	2200      	movs	r2, #0
 8001eb0:	602a      	str	r2, [r5, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f7fe fbed 	bl	8000692 <_write>
 8001eb8:	1c43      	adds	r3, r0, #1
 8001eba:	d102      	bne.n	8001ec2 <_write_r+0x1e>
 8001ebc:	682b      	ldr	r3, [r5, #0]
 8001ebe:	b103      	cbz	r3, 8001ec2 <_write_r+0x1e>
 8001ec0:	6023      	str	r3, [r4, #0]
 8001ec2:	bd38      	pop	{r3, r4, r5, pc}
 8001ec4:	200001f8 	.word	0x200001f8

08001ec8 <__errno>:
 8001ec8:	4b01      	ldr	r3, [pc, #4]	@ (8001ed0 <__errno+0x8>)
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000020 	.word	0x20000020

08001ed4 <__libc_init_array>:
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	4d0d      	ldr	r5, [pc, #52]	@ (8001f0c <__libc_init_array+0x38>)
 8001ed8:	4c0d      	ldr	r4, [pc, #52]	@ (8001f10 <__libc_init_array+0x3c>)
 8001eda:	1b64      	subs	r4, r4, r5
 8001edc:	10a4      	asrs	r4, r4, #2
 8001ede:	2600      	movs	r6, #0
 8001ee0:	42a6      	cmp	r6, r4
 8001ee2:	d109      	bne.n	8001ef8 <__libc_init_array+0x24>
 8001ee4:	4d0b      	ldr	r5, [pc, #44]	@ (8001f14 <__libc_init_array+0x40>)
 8001ee6:	4c0c      	ldr	r4, [pc, #48]	@ (8001f18 <__libc_init_array+0x44>)
 8001ee8:	f000 fd22 	bl	8002930 <_init>
 8001eec:	1b64      	subs	r4, r4, r5
 8001eee:	10a4      	asrs	r4, r4, #2
 8001ef0:	2600      	movs	r6, #0
 8001ef2:	42a6      	cmp	r6, r4
 8001ef4:	d105      	bne.n	8001f02 <__libc_init_array+0x2e>
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
 8001ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001efc:	4798      	blx	r3
 8001efe:	3601      	adds	r6, #1
 8001f00:	e7ee      	b.n	8001ee0 <__libc_init_array+0xc>
 8001f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f06:	4798      	blx	r3
 8001f08:	3601      	adds	r6, #1
 8001f0a:	e7f2      	b.n	8001ef2 <__libc_init_array+0x1e>
 8001f0c:	08002a34 	.word	0x08002a34
 8001f10:	08002a34 	.word	0x08002a34
 8001f14:	08002a34 	.word	0x08002a34
 8001f18:	08002a38 	.word	0x08002a38

08001f1c <__retarget_lock_init_recursive>:
 8001f1c:	4770      	bx	lr

08001f1e <__retarget_lock_acquire_recursive>:
 8001f1e:	4770      	bx	lr

08001f20 <__retarget_lock_release_recursive>:
 8001f20:	4770      	bx	lr
	...

08001f24 <_free_r>:
 8001f24:	b538      	push	{r3, r4, r5, lr}
 8001f26:	4605      	mov	r5, r0
 8001f28:	2900      	cmp	r1, #0
 8001f2a:	d041      	beq.n	8001fb0 <_free_r+0x8c>
 8001f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f30:	1f0c      	subs	r4, r1, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bfb8      	it	lt
 8001f36:	18e4      	addlt	r4, r4, r3
 8001f38:	f000 f8e0 	bl	80020fc <__malloc_lock>
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb4 <_free_r+0x90>)
 8001f3e:	6813      	ldr	r3, [r2, #0]
 8001f40:	b933      	cbnz	r3, 8001f50 <_free_r+0x2c>
 8001f42:	6063      	str	r3, [r4, #4]
 8001f44:	6014      	str	r4, [r2, #0]
 8001f46:	4628      	mov	r0, r5
 8001f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f4c:	f000 b8dc 	b.w	8002108 <__malloc_unlock>
 8001f50:	42a3      	cmp	r3, r4
 8001f52:	d908      	bls.n	8001f66 <_free_r+0x42>
 8001f54:	6820      	ldr	r0, [r4, #0]
 8001f56:	1821      	adds	r1, r4, r0
 8001f58:	428b      	cmp	r3, r1
 8001f5a:	bf01      	itttt	eq
 8001f5c:	6819      	ldreq	r1, [r3, #0]
 8001f5e:	685b      	ldreq	r3, [r3, #4]
 8001f60:	1809      	addeq	r1, r1, r0
 8001f62:	6021      	streq	r1, [r4, #0]
 8001f64:	e7ed      	b.n	8001f42 <_free_r+0x1e>
 8001f66:	461a      	mov	r2, r3
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	b10b      	cbz	r3, 8001f70 <_free_r+0x4c>
 8001f6c:	42a3      	cmp	r3, r4
 8001f6e:	d9fa      	bls.n	8001f66 <_free_r+0x42>
 8001f70:	6811      	ldr	r1, [r2, #0]
 8001f72:	1850      	adds	r0, r2, r1
 8001f74:	42a0      	cmp	r0, r4
 8001f76:	d10b      	bne.n	8001f90 <_free_r+0x6c>
 8001f78:	6820      	ldr	r0, [r4, #0]
 8001f7a:	4401      	add	r1, r0
 8001f7c:	1850      	adds	r0, r2, r1
 8001f7e:	4283      	cmp	r3, r0
 8001f80:	6011      	str	r1, [r2, #0]
 8001f82:	d1e0      	bne.n	8001f46 <_free_r+0x22>
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	6053      	str	r3, [r2, #4]
 8001f8a:	4408      	add	r0, r1
 8001f8c:	6010      	str	r0, [r2, #0]
 8001f8e:	e7da      	b.n	8001f46 <_free_r+0x22>
 8001f90:	d902      	bls.n	8001f98 <_free_r+0x74>
 8001f92:	230c      	movs	r3, #12
 8001f94:	602b      	str	r3, [r5, #0]
 8001f96:	e7d6      	b.n	8001f46 <_free_r+0x22>
 8001f98:	6820      	ldr	r0, [r4, #0]
 8001f9a:	1821      	adds	r1, r4, r0
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	bf04      	itt	eq
 8001fa0:	6819      	ldreq	r1, [r3, #0]
 8001fa2:	685b      	ldreq	r3, [r3, #4]
 8001fa4:	6063      	str	r3, [r4, #4]
 8001fa6:	bf04      	itt	eq
 8001fa8:	1809      	addeq	r1, r1, r0
 8001faa:	6021      	streq	r1, [r4, #0]
 8001fac:	6054      	str	r4, [r2, #4]
 8001fae:	e7ca      	b.n	8001f46 <_free_r+0x22>
 8001fb0:	bd38      	pop	{r3, r4, r5, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000204 	.word	0x20000204

08001fb8 <sbrk_aligned>:
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	4e0f      	ldr	r6, [pc, #60]	@ (8001ff8 <sbrk_aligned+0x40>)
 8001fbc:	460c      	mov	r4, r1
 8001fbe:	6831      	ldr	r1, [r6, #0]
 8001fc0:	4605      	mov	r5, r0
 8001fc2:	b911      	cbnz	r1, 8001fca <sbrk_aligned+0x12>
 8001fc4:	f000 fca4 	bl	8002910 <_sbrk_r>
 8001fc8:	6030      	str	r0, [r6, #0]
 8001fca:	4621      	mov	r1, r4
 8001fcc:	4628      	mov	r0, r5
 8001fce:	f000 fc9f 	bl	8002910 <_sbrk_r>
 8001fd2:	1c43      	adds	r3, r0, #1
 8001fd4:	d103      	bne.n	8001fde <sbrk_aligned+0x26>
 8001fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8001fda:	4620      	mov	r0, r4
 8001fdc:	bd70      	pop	{r4, r5, r6, pc}
 8001fde:	1cc4      	adds	r4, r0, #3
 8001fe0:	f024 0403 	bic.w	r4, r4, #3
 8001fe4:	42a0      	cmp	r0, r4
 8001fe6:	d0f8      	beq.n	8001fda <sbrk_aligned+0x22>
 8001fe8:	1a21      	subs	r1, r4, r0
 8001fea:	4628      	mov	r0, r5
 8001fec:	f000 fc90 	bl	8002910 <_sbrk_r>
 8001ff0:	3001      	adds	r0, #1
 8001ff2:	d1f2      	bne.n	8001fda <sbrk_aligned+0x22>
 8001ff4:	e7ef      	b.n	8001fd6 <sbrk_aligned+0x1e>
 8001ff6:	bf00      	nop
 8001ff8:	20000200 	.word	0x20000200

08001ffc <_malloc_r>:
 8001ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002000:	1ccd      	adds	r5, r1, #3
 8002002:	f025 0503 	bic.w	r5, r5, #3
 8002006:	3508      	adds	r5, #8
 8002008:	2d0c      	cmp	r5, #12
 800200a:	bf38      	it	cc
 800200c:	250c      	movcc	r5, #12
 800200e:	2d00      	cmp	r5, #0
 8002010:	4606      	mov	r6, r0
 8002012:	db01      	blt.n	8002018 <_malloc_r+0x1c>
 8002014:	42a9      	cmp	r1, r5
 8002016:	d904      	bls.n	8002022 <_malloc_r+0x26>
 8002018:	230c      	movs	r3, #12
 800201a:	6033      	str	r3, [r6, #0]
 800201c:	2000      	movs	r0, #0
 800201e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80020f8 <_malloc_r+0xfc>
 8002026:	f000 f869 	bl	80020fc <__malloc_lock>
 800202a:	f8d8 3000 	ldr.w	r3, [r8]
 800202e:	461c      	mov	r4, r3
 8002030:	bb44      	cbnz	r4, 8002084 <_malloc_r+0x88>
 8002032:	4629      	mov	r1, r5
 8002034:	4630      	mov	r0, r6
 8002036:	f7ff ffbf 	bl	8001fb8 <sbrk_aligned>
 800203a:	1c43      	adds	r3, r0, #1
 800203c:	4604      	mov	r4, r0
 800203e:	d158      	bne.n	80020f2 <_malloc_r+0xf6>
 8002040:	f8d8 4000 	ldr.w	r4, [r8]
 8002044:	4627      	mov	r7, r4
 8002046:	2f00      	cmp	r7, #0
 8002048:	d143      	bne.n	80020d2 <_malloc_r+0xd6>
 800204a:	2c00      	cmp	r4, #0
 800204c:	d04b      	beq.n	80020e6 <_malloc_r+0xea>
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	4639      	mov	r1, r7
 8002052:	4630      	mov	r0, r6
 8002054:	eb04 0903 	add.w	r9, r4, r3
 8002058:	f000 fc5a 	bl	8002910 <_sbrk_r>
 800205c:	4581      	cmp	r9, r0
 800205e:	d142      	bne.n	80020e6 <_malloc_r+0xea>
 8002060:	6821      	ldr	r1, [r4, #0]
 8002062:	1a6d      	subs	r5, r5, r1
 8002064:	4629      	mov	r1, r5
 8002066:	4630      	mov	r0, r6
 8002068:	f7ff ffa6 	bl	8001fb8 <sbrk_aligned>
 800206c:	3001      	adds	r0, #1
 800206e:	d03a      	beq.n	80020e6 <_malloc_r+0xea>
 8002070:	6823      	ldr	r3, [r4, #0]
 8002072:	442b      	add	r3, r5
 8002074:	6023      	str	r3, [r4, #0]
 8002076:	f8d8 3000 	ldr.w	r3, [r8]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	bb62      	cbnz	r2, 80020d8 <_malloc_r+0xdc>
 800207e:	f8c8 7000 	str.w	r7, [r8]
 8002082:	e00f      	b.n	80020a4 <_malloc_r+0xa8>
 8002084:	6822      	ldr	r2, [r4, #0]
 8002086:	1b52      	subs	r2, r2, r5
 8002088:	d420      	bmi.n	80020cc <_malloc_r+0xd0>
 800208a:	2a0b      	cmp	r2, #11
 800208c:	d917      	bls.n	80020be <_malloc_r+0xc2>
 800208e:	1961      	adds	r1, r4, r5
 8002090:	42a3      	cmp	r3, r4
 8002092:	6025      	str	r5, [r4, #0]
 8002094:	bf18      	it	ne
 8002096:	6059      	strne	r1, [r3, #4]
 8002098:	6863      	ldr	r3, [r4, #4]
 800209a:	bf08      	it	eq
 800209c:	f8c8 1000 	streq.w	r1, [r8]
 80020a0:	5162      	str	r2, [r4, r5]
 80020a2:	604b      	str	r3, [r1, #4]
 80020a4:	4630      	mov	r0, r6
 80020a6:	f000 f82f 	bl	8002108 <__malloc_unlock>
 80020aa:	f104 000b 	add.w	r0, r4, #11
 80020ae:	1d23      	adds	r3, r4, #4
 80020b0:	f020 0007 	bic.w	r0, r0, #7
 80020b4:	1ac2      	subs	r2, r0, r3
 80020b6:	bf1c      	itt	ne
 80020b8:	1a1b      	subne	r3, r3, r0
 80020ba:	50a3      	strne	r3, [r4, r2]
 80020bc:	e7af      	b.n	800201e <_malloc_r+0x22>
 80020be:	6862      	ldr	r2, [r4, #4]
 80020c0:	42a3      	cmp	r3, r4
 80020c2:	bf0c      	ite	eq
 80020c4:	f8c8 2000 	streq.w	r2, [r8]
 80020c8:	605a      	strne	r2, [r3, #4]
 80020ca:	e7eb      	b.n	80020a4 <_malloc_r+0xa8>
 80020cc:	4623      	mov	r3, r4
 80020ce:	6864      	ldr	r4, [r4, #4]
 80020d0:	e7ae      	b.n	8002030 <_malloc_r+0x34>
 80020d2:	463c      	mov	r4, r7
 80020d4:	687f      	ldr	r7, [r7, #4]
 80020d6:	e7b6      	b.n	8002046 <_malloc_r+0x4a>
 80020d8:	461a      	mov	r2, r3
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	42a3      	cmp	r3, r4
 80020de:	d1fb      	bne.n	80020d8 <_malloc_r+0xdc>
 80020e0:	2300      	movs	r3, #0
 80020e2:	6053      	str	r3, [r2, #4]
 80020e4:	e7de      	b.n	80020a4 <_malloc_r+0xa8>
 80020e6:	230c      	movs	r3, #12
 80020e8:	6033      	str	r3, [r6, #0]
 80020ea:	4630      	mov	r0, r6
 80020ec:	f000 f80c 	bl	8002108 <__malloc_unlock>
 80020f0:	e794      	b.n	800201c <_malloc_r+0x20>
 80020f2:	6005      	str	r5, [r0, #0]
 80020f4:	e7d6      	b.n	80020a4 <_malloc_r+0xa8>
 80020f6:	bf00      	nop
 80020f8:	20000204 	.word	0x20000204

080020fc <__malloc_lock>:
 80020fc:	4801      	ldr	r0, [pc, #4]	@ (8002104 <__malloc_lock+0x8>)
 80020fe:	f7ff bf0e 	b.w	8001f1e <__retarget_lock_acquire_recursive>
 8002102:	bf00      	nop
 8002104:	200001fc 	.word	0x200001fc

08002108 <__malloc_unlock>:
 8002108:	4801      	ldr	r0, [pc, #4]	@ (8002110 <__malloc_unlock+0x8>)
 800210a:	f7ff bf09 	b.w	8001f20 <__retarget_lock_release_recursive>
 800210e:	bf00      	nop
 8002110:	200001fc 	.word	0x200001fc

08002114 <__sfputc_r>:
 8002114:	6893      	ldr	r3, [r2, #8]
 8002116:	3b01      	subs	r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	b410      	push	{r4}
 800211c:	6093      	str	r3, [r2, #8]
 800211e:	da08      	bge.n	8002132 <__sfputc_r+0x1e>
 8002120:	6994      	ldr	r4, [r2, #24]
 8002122:	42a3      	cmp	r3, r4
 8002124:	db01      	blt.n	800212a <__sfputc_r+0x16>
 8002126:	290a      	cmp	r1, #10
 8002128:	d103      	bne.n	8002132 <__sfputc_r+0x1e>
 800212a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800212e:	f7ff bde8 	b.w	8001d02 <__swbuf_r>
 8002132:	6813      	ldr	r3, [r2, #0]
 8002134:	1c58      	adds	r0, r3, #1
 8002136:	6010      	str	r0, [r2, #0]
 8002138:	7019      	strb	r1, [r3, #0]
 800213a:	4608      	mov	r0, r1
 800213c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002140:	4770      	bx	lr

08002142 <__sfputs_r>:
 8002142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002144:	4606      	mov	r6, r0
 8002146:	460f      	mov	r7, r1
 8002148:	4614      	mov	r4, r2
 800214a:	18d5      	adds	r5, r2, r3
 800214c:	42ac      	cmp	r4, r5
 800214e:	d101      	bne.n	8002154 <__sfputs_r+0x12>
 8002150:	2000      	movs	r0, #0
 8002152:	e007      	b.n	8002164 <__sfputs_r+0x22>
 8002154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002158:	463a      	mov	r2, r7
 800215a:	4630      	mov	r0, r6
 800215c:	f7ff ffda 	bl	8002114 <__sfputc_r>
 8002160:	1c43      	adds	r3, r0, #1
 8002162:	d1f3      	bne.n	800214c <__sfputs_r+0xa>
 8002164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002168 <_vfiprintf_r>:
 8002168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800216c:	460d      	mov	r5, r1
 800216e:	b09d      	sub	sp, #116	@ 0x74
 8002170:	4614      	mov	r4, r2
 8002172:	4698      	mov	r8, r3
 8002174:	4606      	mov	r6, r0
 8002176:	b118      	cbz	r0, 8002180 <_vfiprintf_r+0x18>
 8002178:	6a03      	ldr	r3, [r0, #32]
 800217a:	b90b      	cbnz	r3, 8002180 <_vfiprintf_r+0x18>
 800217c:	f7ff fcd8 	bl	8001b30 <__sinit>
 8002180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002182:	07d9      	lsls	r1, r3, #31
 8002184:	d405      	bmi.n	8002192 <_vfiprintf_r+0x2a>
 8002186:	89ab      	ldrh	r3, [r5, #12]
 8002188:	059a      	lsls	r2, r3, #22
 800218a:	d402      	bmi.n	8002192 <_vfiprintf_r+0x2a>
 800218c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800218e:	f7ff fec6 	bl	8001f1e <__retarget_lock_acquire_recursive>
 8002192:	89ab      	ldrh	r3, [r5, #12]
 8002194:	071b      	lsls	r3, r3, #28
 8002196:	d501      	bpl.n	800219c <_vfiprintf_r+0x34>
 8002198:	692b      	ldr	r3, [r5, #16]
 800219a:	b99b      	cbnz	r3, 80021c4 <_vfiprintf_r+0x5c>
 800219c:	4629      	mov	r1, r5
 800219e:	4630      	mov	r0, r6
 80021a0:	f7ff fdee 	bl	8001d80 <__swsetup_r>
 80021a4:	b170      	cbz	r0, 80021c4 <_vfiprintf_r+0x5c>
 80021a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80021a8:	07dc      	lsls	r4, r3, #31
 80021aa:	d504      	bpl.n	80021b6 <_vfiprintf_r+0x4e>
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	b01d      	add	sp, #116	@ 0x74
 80021b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021b6:	89ab      	ldrh	r3, [r5, #12]
 80021b8:	0598      	lsls	r0, r3, #22
 80021ba:	d4f7      	bmi.n	80021ac <_vfiprintf_r+0x44>
 80021bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80021be:	f7ff feaf 	bl	8001f20 <__retarget_lock_release_recursive>
 80021c2:	e7f3      	b.n	80021ac <_vfiprintf_r+0x44>
 80021c4:	2300      	movs	r3, #0
 80021c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80021c8:	2320      	movs	r3, #32
 80021ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80021ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80021d2:	2330      	movs	r3, #48	@ 0x30
 80021d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002384 <_vfiprintf_r+0x21c>
 80021d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80021dc:	f04f 0901 	mov.w	r9, #1
 80021e0:	4623      	mov	r3, r4
 80021e2:	469a      	mov	sl, r3
 80021e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021e8:	b10a      	cbz	r2, 80021ee <_vfiprintf_r+0x86>
 80021ea:	2a25      	cmp	r2, #37	@ 0x25
 80021ec:	d1f9      	bne.n	80021e2 <_vfiprintf_r+0x7a>
 80021ee:	ebba 0b04 	subs.w	fp, sl, r4
 80021f2:	d00b      	beq.n	800220c <_vfiprintf_r+0xa4>
 80021f4:	465b      	mov	r3, fp
 80021f6:	4622      	mov	r2, r4
 80021f8:	4629      	mov	r1, r5
 80021fa:	4630      	mov	r0, r6
 80021fc:	f7ff ffa1 	bl	8002142 <__sfputs_r>
 8002200:	3001      	adds	r0, #1
 8002202:	f000 80a7 	beq.w	8002354 <_vfiprintf_r+0x1ec>
 8002206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002208:	445a      	add	r2, fp
 800220a:	9209      	str	r2, [sp, #36]	@ 0x24
 800220c:	f89a 3000 	ldrb.w	r3, [sl]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 809f 	beq.w	8002354 <_vfiprintf_r+0x1ec>
 8002216:	2300      	movs	r3, #0
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002220:	f10a 0a01 	add.w	sl, sl, #1
 8002224:	9304      	str	r3, [sp, #16]
 8002226:	9307      	str	r3, [sp, #28]
 8002228:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800222c:	931a      	str	r3, [sp, #104]	@ 0x68
 800222e:	4654      	mov	r4, sl
 8002230:	2205      	movs	r2, #5
 8002232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002236:	4853      	ldr	r0, [pc, #332]	@ (8002384 <_vfiprintf_r+0x21c>)
 8002238:	f7fd ffea 	bl	8000210 <memchr>
 800223c:	9a04      	ldr	r2, [sp, #16]
 800223e:	b9d8      	cbnz	r0, 8002278 <_vfiprintf_r+0x110>
 8002240:	06d1      	lsls	r1, r2, #27
 8002242:	bf44      	itt	mi
 8002244:	2320      	movmi	r3, #32
 8002246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800224a:	0713      	lsls	r3, r2, #28
 800224c:	bf44      	itt	mi
 800224e:	232b      	movmi	r3, #43	@ 0x2b
 8002250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002254:	f89a 3000 	ldrb.w	r3, [sl]
 8002258:	2b2a      	cmp	r3, #42	@ 0x2a
 800225a:	d015      	beq.n	8002288 <_vfiprintf_r+0x120>
 800225c:	9a07      	ldr	r2, [sp, #28]
 800225e:	4654      	mov	r4, sl
 8002260:	2000      	movs	r0, #0
 8002262:	f04f 0c0a 	mov.w	ip, #10
 8002266:	4621      	mov	r1, r4
 8002268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800226c:	3b30      	subs	r3, #48	@ 0x30
 800226e:	2b09      	cmp	r3, #9
 8002270:	d94b      	bls.n	800230a <_vfiprintf_r+0x1a2>
 8002272:	b1b0      	cbz	r0, 80022a2 <_vfiprintf_r+0x13a>
 8002274:	9207      	str	r2, [sp, #28]
 8002276:	e014      	b.n	80022a2 <_vfiprintf_r+0x13a>
 8002278:	eba0 0308 	sub.w	r3, r0, r8
 800227c:	fa09 f303 	lsl.w	r3, r9, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	9304      	str	r3, [sp, #16]
 8002284:	46a2      	mov	sl, r4
 8002286:	e7d2      	b.n	800222e <_vfiprintf_r+0xc6>
 8002288:	9b03      	ldr	r3, [sp, #12]
 800228a:	1d19      	adds	r1, r3, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	9103      	str	r1, [sp, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	bfbb      	ittet	lt
 8002294:	425b      	neglt	r3, r3
 8002296:	f042 0202 	orrlt.w	r2, r2, #2
 800229a:	9307      	strge	r3, [sp, #28]
 800229c:	9307      	strlt	r3, [sp, #28]
 800229e:	bfb8      	it	lt
 80022a0:	9204      	strlt	r2, [sp, #16]
 80022a2:	7823      	ldrb	r3, [r4, #0]
 80022a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80022a6:	d10a      	bne.n	80022be <_vfiprintf_r+0x156>
 80022a8:	7863      	ldrb	r3, [r4, #1]
 80022aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80022ac:	d132      	bne.n	8002314 <_vfiprintf_r+0x1ac>
 80022ae:	9b03      	ldr	r3, [sp, #12]
 80022b0:	1d1a      	adds	r2, r3, #4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	9203      	str	r2, [sp, #12]
 80022b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80022ba:	3402      	adds	r4, #2
 80022bc:	9305      	str	r3, [sp, #20]
 80022be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002394 <_vfiprintf_r+0x22c>
 80022c2:	7821      	ldrb	r1, [r4, #0]
 80022c4:	2203      	movs	r2, #3
 80022c6:	4650      	mov	r0, sl
 80022c8:	f7fd ffa2 	bl	8000210 <memchr>
 80022cc:	b138      	cbz	r0, 80022de <_vfiprintf_r+0x176>
 80022ce:	9b04      	ldr	r3, [sp, #16]
 80022d0:	eba0 000a 	sub.w	r0, r0, sl
 80022d4:	2240      	movs	r2, #64	@ 0x40
 80022d6:	4082      	lsls	r2, r0
 80022d8:	4313      	orrs	r3, r2
 80022da:	3401      	adds	r4, #1
 80022dc:	9304      	str	r3, [sp, #16]
 80022de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022e2:	4829      	ldr	r0, [pc, #164]	@ (8002388 <_vfiprintf_r+0x220>)
 80022e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80022e8:	2206      	movs	r2, #6
 80022ea:	f7fd ff91 	bl	8000210 <memchr>
 80022ee:	2800      	cmp	r0, #0
 80022f0:	d03f      	beq.n	8002372 <_vfiprintf_r+0x20a>
 80022f2:	4b26      	ldr	r3, [pc, #152]	@ (800238c <_vfiprintf_r+0x224>)
 80022f4:	bb1b      	cbnz	r3, 800233e <_vfiprintf_r+0x1d6>
 80022f6:	9b03      	ldr	r3, [sp, #12]
 80022f8:	3307      	adds	r3, #7
 80022fa:	f023 0307 	bic.w	r3, r3, #7
 80022fe:	3308      	adds	r3, #8
 8002300:	9303      	str	r3, [sp, #12]
 8002302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002304:	443b      	add	r3, r7
 8002306:	9309      	str	r3, [sp, #36]	@ 0x24
 8002308:	e76a      	b.n	80021e0 <_vfiprintf_r+0x78>
 800230a:	fb0c 3202 	mla	r2, ip, r2, r3
 800230e:	460c      	mov	r4, r1
 8002310:	2001      	movs	r0, #1
 8002312:	e7a8      	b.n	8002266 <_vfiprintf_r+0xfe>
 8002314:	2300      	movs	r3, #0
 8002316:	3401      	adds	r4, #1
 8002318:	9305      	str	r3, [sp, #20]
 800231a:	4619      	mov	r1, r3
 800231c:	f04f 0c0a 	mov.w	ip, #10
 8002320:	4620      	mov	r0, r4
 8002322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002326:	3a30      	subs	r2, #48	@ 0x30
 8002328:	2a09      	cmp	r2, #9
 800232a:	d903      	bls.n	8002334 <_vfiprintf_r+0x1cc>
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0c6      	beq.n	80022be <_vfiprintf_r+0x156>
 8002330:	9105      	str	r1, [sp, #20]
 8002332:	e7c4      	b.n	80022be <_vfiprintf_r+0x156>
 8002334:	fb0c 2101 	mla	r1, ip, r1, r2
 8002338:	4604      	mov	r4, r0
 800233a:	2301      	movs	r3, #1
 800233c:	e7f0      	b.n	8002320 <_vfiprintf_r+0x1b8>
 800233e:	ab03      	add	r3, sp, #12
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	462a      	mov	r2, r5
 8002344:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <_vfiprintf_r+0x228>)
 8002346:	a904      	add	r1, sp, #16
 8002348:	4630      	mov	r0, r6
 800234a:	f3af 8000 	nop.w
 800234e:	4607      	mov	r7, r0
 8002350:	1c78      	adds	r0, r7, #1
 8002352:	d1d6      	bne.n	8002302 <_vfiprintf_r+0x19a>
 8002354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002356:	07d9      	lsls	r1, r3, #31
 8002358:	d405      	bmi.n	8002366 <_vfiprintf_r+0x1fe>
 800235a:	89ab      	ldrh	r3, [r5, #12]
 800235c:	059a      	lsls	r2, r3, #22
 800235e:	d402      	bmi.n	8002366 <_vfiprintf_r+0x1fe>
 8002360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002362:	f7ff fddd 	bl	8001f20 <__retarget_lock_release_recursive>
 8002366:	89ab      	ldrh	r3, [r5, #12]
 8002368:	065b      	lsls	r3, r3, #25
 800236a:	f53f af1f 	bmi.w	80021ac <_vfiprintf_r+0x44>
 800236e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002370:	e71e      	b.n	80021b0 <_vfiprintf_r+0x48>
 8002372:	ab03      	add	r3, sp, #12
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	462a      	mov	r2, r5
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <_vfiprintf_r+0x228>)
 800237a:	a904      	add	r1, sp, #16
 800237c:	4630      	mov	r0, r6
 800237e:	f000 f879 	bl	8002474 <_printf_i>
 8002382:	e7e4      	b.n	800234e <_vfiprintf_r+0x1e6>
 8002384:	080029f8 	.word	0x080029f8
 8002388:	08002a02 	.word	0x08002a02
 800238c:	00000000 	.word	0x00000000
 8002390:	08002143 	.word	0x08002143
 8002394:	080029fe 	.word	0x080029fe

08002398 <_printf_common>:
 8002398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800239c:	4616      	mov	r6, r2
 800239e:	4698      	mov	r8, r3
 80023a0:	688a      	ldr	r2, [r1, #8]
 80023a2:	690b      	ldr	r3, [r1, #16]
 80023a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80023a8:	4293      	cmp	r3, r2
 80023aa:	bfb8      	it	lt
 80023ac:	4613      	movlt	r3, r2
 80023ae:	6033      	str	r3, [r6, #0]
 80023b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80023b4:	4607      	mov	r7, r0
 80023b6:	460c      	mov	r4, r1
 80023b8:	b10a      	cbz	r2, 80023be <_printf_common+0x26>
 80023ba:	3301      	adds	r3, #1
 80023bc:	6033      	str	r3, [r6, #0]
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	0699      	lsls	r1, r3, #26
 80023c2:	bf42      	ittt	mi
 80023c4:	6833      	ldrmi	r3, [r6, #0]
 80023c6:	3302      	addmi	r3, #2
 80023c8:	6033      	strmi	r3, [r6, #0]
 80023ca:	6825      	ldr	r5, [r4, #0]
 80023cc:	f015 0506 	ands.w	r5, r5, #6
 80023d0:	d106      	bne.n	80023e0 <_printf_common+0x48>
 80023d2:	f104 0a19 	add.w	sl, r4, #25
 80023d6:	68e3      	ldr	r3, [r4, #12]
 80023d8:	6832      	ldr	r2, [r6, #0]
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	42ab      	cmp	r3, r5
 80023de:	dc26      	bgt.n	800242e <_printf_common+0x96>
 80023e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80023e4:	6822      	ldr	r2, [r4, #0]
 80023e6:	3b00      	subs	r3, #0
 80023e8:	bf18      	it	ne
 80023ea:	2301      	movne	r3, #1
 80023ec:	0692      	lsls	r2, r2, #26
 80023ee:	d42b      	bmi.n	8002448 <_printf_common+0xb0>
 80023f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80023f4:	4641      	mov	r1, r8
 80023f6:	4638      	mov	r0, r7
 80023f8:	47c8      	blx	r9
 80023fa:	3001      	adds	r0, #1
 80023fc:	d01e      	beq.n	800243c <_printf_common+0xa4>
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	6922      	ldr	r2, [r4, #16]
 8002402:	f003 0306 	and.w	r3, r3, #6
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf02      	ittt	eq
 800240a:	68e5      	ldreq	r5, [r4, #12]
 800240c:	6833      	ldreq	r3, [r6, #0]
 800240e:	1aed      	subeq	r5, r5, r3
 8002410:	68a3      	ldr	r3, [r4, #8]
 8002412:	bf0c      	ite	eq
 8002414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002418:	2500      	movne	r5, #0
 800241a:	4293      	cmp	r3, r2
 800241c:	bfc4      	itt	gt
 800241e:	1a9b      	subgt	r3, r3, r2
 8002420:	18ed      	addgt	r5, r5, r3
 8002422:	2600      	movs	r6, #0
 8002424:	341a      	adds	r4, #26
 8002426:	42b5      	cmp	r5, r6
 8002428:	d11a      	bne.n	8002460 <_printf_common+0xc8>
 800242a:	2000      	movs	r0, #0
 800242c:	e008      	b.n	8002440 <_printf_common+0xa8>
 800242e:	2301      	movs	r3, #1
 8002430:	4652      	mov	r2, sl
 8002432:	4641      	mov	r1, r8
 8002434:	4638      	mov	r0, r7
 8002436:	47c8      	blx	r9
 8002438:	3001      	adds	r0, #1
 800243a:	d103      	bne.n	8002444 <_printf_common+0xac>
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002444:	3501      	adds	r5, #1
 8002446:	e7c6      	b.n	80023d6 <_printf_common+0x3e>
 8002448:	18e1      	adds	r1, r4, r3
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	2030      	movs	r0, #48	@ 0x30
 800244e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002452:	4422      	add	r2, r4
 8002454:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800245c:	3302      	adds	r3, #2
 800245e:	e7c7      	b.n	80023f0 <_printf_common+0x58>
 8002460:	2301      	movs	r3, #1
 8002462:	4622      	mov	r2, r4
 8002464:	4641      	mov	r1, r8
 8002466:	4638      	mov	r0, r7
 8002468:	47c8      	blx	r9
 800246a:	3001      	adds	r0, #1
 800246c:	d0e6      	beq.n	800243c <_printf_common+0xa4>
 800246e:	3601      	adds	r6, #1
 8002470:	e7d9      	b.n	8002426 <_printf_common+0x8e>
	...

08002474 <_printf_i>:
 8002474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002478:	7e0f      	ldrb	r7, [r1, #24]
 800247a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800247c:	2f78      	cmp	r7, #120	@ 0x78
 800247e:	4691      	mov	r9, r2
 8002480:	4680      	mov	r8, r0
 8002482:	460c      	mov	r4, r1
 8002484:	469a      	mov	sl, r3
 8002486:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800248a:	d807      	bhi.n	800249c <_printf_i+0x28>
 800248c:	2f62      	cmp	r7, #98	@ 0x62
 800248e:	d80a      	bhi.n	80024a6 <_printf_i+0x32>
 8002490:	2f00      	cmp	r7, #0
 8002492:	f000 80d1 	beq.w	8002638 <_printf_i+0x1c4>
 8002496:	2f58      	cmp	r7, #88	@ 0x58
 8002498:	f000 80b8 	beq.w	800260c <_printf_i+0x198>
 800249c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80024a4:	e03a      	b.n	800251c <_printf_i+0xa8>
 80024a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80024aa:	2b15      	cmp	r3, #21
 80024ac:	d8f6      	bhi.n	800249c <_printf_i+0x28>
 80024ae:	a101      	add	r1, pc, #4	@ (adr r1, 80024b4 <_printf_i+0x40>)
 80024b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024b4:	0800250d 	.word	0x0800250d
 80024b8:	08002521 	.word	0x08002521
 80024bc:	0800249d 	.word	0x0800249d
 80024c0:	0800249d 	.word	0x0800249d
 80024c4:	0800249d 	.word	0x0800249d
 80024c8:	0800249d 	.word	0x0800249d
 80024cc:	08002521 	.word	0x08002521
 80024d0:	0800249d 	.word	0x0800249d
 80024d4:	0800249d 	.word	0x0800249d
 80024d8:	0800249d 	.word	0x0800249d
 80024dc:	0800249d 	.word	0x0800249d
 80024e0:	0800261f 	.word	0x0800261f
 80024e4:	0800254b 	.word	0x0800254b
 80024e8:	080025d9 	.word	0x080025d9
 80024ec:	0800249d 	.word	0x0800249d
 80024f0:	0800249d 	.word	0x0800249d
 80024f4:	08002641 	.word	0x08002641
 80024f8:	0800249d 	.word	0x0800249d
 80024fc:	0800254b 	.word	0x0800254b
 8002500:	0800249d 	.word	0x0800249d
 8002504:	0800249d 	.word	0x0800249d
 8002508:	080025e1 	.word	0x080025e1
 800250c:	6833      	ldr	r3, [r6, #0]
 800250e:	1d1a      	adds	r2, r3, #4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6032      	str	r2, [r6, #0]
 8002514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002518:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800251c:	2301      	movs	r3, #1
 800251e:	e09c      	b.n	800265a <_printf_i+0x1e6>
 8002520:	6833      	ldr	r3, [r6, #0]
 8002522:	6820      	ldr	r0, [r4, #0]
 8002524:	1d19      	adds	r1, r3, #4
 8002526:	6031      	str	r1, [r6, #0]
 8002528:	0606      	lsls	r6, r0, #24
 800252a:	d501      	bpl.n	8002530 <_printf_i+0xbc>
 800252c:	681d      	ldr	r5, [r3, #0]
 800252e:	e003      	b.n	8002538 <_printf_i+0xc4>
 8002530:	0645      	lsls	r5, r0, #25
 8002532:	d5fb      	bpl.n	800252c <_printf_i+0xb8>
 8002534:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002538:	2d00      	cmp	r5, #0
 800253a:	da03      	bge.n	8002544 <_printf_i+0xd0>
 800253c:	232d      	movs	r3, #45	@ 0x2d
 800253e:	426d      	negs	r5, r5
 8002540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002544:	4858      	ldr	r0, [pc, #352]	@ (80026a8 <_printf_i+0x234>)
 8002546:	230a      	movs	r3, #10
 8002548:	e011      	b.n	800256e <_printf_i+0xfa>
 800254a:	6821      	ldr	r1, [r4, #0]
 800254c:	6833      	ldr	r3, [r6, #0]
 800254e:	0608      	lsls	r0, r1, #24
 8002550:	f853 5b04 	ldr.w	r5, [r3], #4
 8002554:	d402      	bmi.n	800255c <_printf_i+0xe8>
 8002556:	0649      	lsls	r1, r1, #25
 8002558:	bf48      	it	mi
 800255a:	b2ad      	uxthmi	r5, r5
 800255c:	2f6f      	cmp	r7, #111	@ 0x6f
 800255e:	4852      	ldr	r0, [pc, #328]	@ (80026a8 <_printf_i+0x234>)
 8002560:	6033      	str	r3, [r6, #0]
 8002562:	bf14      	ite	ne
 8002564:	230a      	movne	r3, #10
 8002566:	2308      	moveq	r3, #8
 8002568:	2100      	movs	r1, #0
 800256a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800256e:	6866      	ldr	r6, [r4, #4]
 8002570:	60a6      	str	r6, [r4, #8]
 8002572:	2e00      	cmp	r6, #0
 8002574:	db05      	blt.n	8002582 <_printf_i+0x10e>
 8002576:	6821      	ldr	r1, [r4, #0]
 8002578:	432e      	orrs	r6, r5
 800257a:	f021 0104 	bic.w	r1, r1, #4
 800257e:	6021      	str	r1, [r4, #0]
 8002580:	d04b      	beq.n	800261a <_printf_i+0x1a6>
 8002582:	4616      	mov	r6, r2
 8002584:	fbb5 f1f3 	udiv	r1, r5, r3
 8002588:	fb03 5711 	mls	r7, r3, r1, r5
 800258c:	5dc7      	ldrb	r7, [r0, r7]
 800258e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002592:	462f      	mov	r7, r5
 8002594:	42bb      	cmp	r3, r7
 8002596:	460d      	mov	r5, r1
 8002598:	d9f4      	bls.n	8002584 <_printf_i+0x110>
 800259a:	2b08      	cmp	r3, #8
 800259c:	d10b      	bne.n	80025b6 <_printf_i+0x142>
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	07df      	lsls	r7, r3, #31
 80025a2:	d508      	bpl.n	80025b6 <_printf_i+0x142>
 80025a4:	6923      	ldr	r3, [r4, #16]
 80025a6:	6861      	ldr	r1, [r4, #4]
 80025a8:	4299      	cmp	r1, r3
 80025aa:	bfde      	ittt	le
 80025ac:	2330      	movle	r3, #48	@ 0x30
 80025ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025b6:	1b92      	subs	r2, r2, r6
 80025b8:	6122      	str	r2, [r4, #16]
 80025ba:	f8cd a000 	str.w	sl, [sp]
 80025be:	464b      	mov	r3, r9
 80025c0:	aa03      	add	r2, sp, #12
 80025c2:	4621      	mov	r1, r4
 80025c4:	4640      	mov	r0, r8
 80025c6:	f7ff fee7 	bl	8002398 <_printf_common>
 80025ca:	3001      	adds	r0, #1
 80025cc:	d14a      	bne.n	8002664 <_printf_i+0x1f0>
 80025ce:	f04f 30ff 	mov.w	r0, #4294967295
 80025d2:	b004      	add	sp, #16
 80025d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	f043 0320 	orr.w	r3, r3, #32
 80025de:	6023      	str	r3, [r4, #0]
 80025e0:	4832      	ldr	r0, [pc, #200]	@ (80026ac <_printf_i+0x238>)
 80025e2:	2778      	movs	r7, #120	@ 0x78
 80025e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	6831      	ldr	r1, [r6, #0]
 80025ec:	061f      	lsls	r7, r3, #24
 80025ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80025f2:	d402      	bmi.n	80025fa <_printf_i+0x186>
 80025f4:	065f      	lsls	r7, r3, #25
 80025f6:	bf48      	it	mi
 80025f8:	b2ad      	uxthmi	r5, r5
 80025fa:	6031      	str	r1, [r6, #0]
 80025fc:	07d9      	lsls	r1, r3, #31
 80025fe:	bf44      	itt	mi
 8002600:	f043 0320 	orrmi.w	r3, r3, #32
 8002604:	6023      	strmi	r3, [r4, #0]
 8002606:	b11d      	cbz	r5, 8002610 <_printf_i+0x19c>
 8002608:	2310      	movs	r3, #16
 800260a:	e7ad      	b.n	8002568 <_printf_i+0xf4>
 800260c:	4826      	ldr	r0, [pc, #152]	@ (80026a8 <_printf_i+0x234>)
 800260e:	e7e9      	b.n	80025e4 <_printf_i+0x170>
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	f023 0320 	bic.w	r3, r3, #32
 8002616:	6023      	str	r3, [r4, #0]
 8002618:	e7f6      	b.n	8002608 <_printf_i+0x194>
 800261a:	4616      	mov	r6, r2
 800261c:	e7bd      	b.n	800259a <_printf_i+0x126>
 800261e:	6833      	ldr	r3, [r6, #0]
 8002620:	6825      	ldr	r5, [r4, #0]
 8002622:	6961      	ldr	r1, [r4, #20]
 8002624:	1d18      	adds	r0, r3, #4
 8002626:	6030      	str	r0, [r6, #0]
 8002628:	062e      	lsls	r6, r5, #24
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	d501      	bpl.n	8002632 <_printf_i+0x1be>
 800262e:	6019      	str	r1, [r3, #0]
 8002630:	e002      	b.n	8002638 <_printf_i+0x1c4>
 8002632:	0668      	lsls	r0, r5, #25
 8002634:	d5fb      	bpl.n	800262e <_printf_i+0x1ba>
 8002636:	8019      	strh	r1, [r3, #0]
 8002638:	2300      	movs	r3, #0
 800263a:	6123      	str	r3, [r4, #16]
 800263c:	4616      	mov	r6, r2
 800263e:	e7bc      	b.n	80025ba <_printf_i+0x146>
 8002640:	6833      	ldr	r3, [r6, #0]
 8002642:	1d1a      	adds	r2, r3, #4
 8002644:	6032      	str	r2, [r6, #0]
 8002646:	681e      	ldr	r6, [r3, #0]
 8002648:	6862      	ldr	r2, [r4, #4]
 800264a:	2100      	movs	r1, #0
 800264c:	4630      	mov	r0, r6
 800264e:	f7fd fddf 	bl	8000210 <memchr>
 8002652:	b108      	cbz	r0, 8002658 <_printf_i+0x1e4>
 8002654:	1b80      	subs	r0, r0, r6
 8002656:	6060      	str	r0, [r4, #4]
 8002658:	6863      	ldr	r3, [r4, #4]
 800265a:	6123      	str	r3, [r4, #16]
 800265c:	2300      	movs	r3, #0
 800265e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002662:	e7aa      	b.n	80025ba <_printf_i+0x146>
 8002664:	6923      	ldr	r3, [r4, #16]
 8002666:	4632      	mov	r2, r6
 8002668:	4649      	mov	r1, r9
 800266a:	4640      	mov	r0, r8
 800266c:	47d0      	blx	sl
 800266e:	3001      	adds	r0, #1
 8002670:	d0ad      	beq.n	80025ce <_printf_i+0x15a>
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	079b      	lsls	r3, r3, #30
 8002676:	d413      	bmi.n	80026a0 <_printf_i+0x22c>
 8002678:	68e0      	ldr	r0, [r4, #12]
 800267a:	9b03      	ldr	r3, [sp, #12]
 800267c:	4298      	cmp	r0, r3
 800267e:	bfb8      	it	lt
 8002680:	4618      	movlt	r0, r3
 8002682:	e7a6      	b.n	80025d2 <_printf_i+0x15e>
 8002684:	2301      	movs	r3, #1
 8002686:	4632      	mov	r2, r6
 8002688:	4649      	mov	r1, r9
 800268a:	4640      	mov	r0, r8
 800268c:	47d0      	blx	sl
 800268e:	3001      	adds	r0, #1
 8002690:	d09d      	beq.n	80025ce <_printf_i+0x15a>
 8002692:	3501      	adds	r5, #1
 8002694:	68e3      	ldr	r3, [r4, #12]
 8002696:	9903      	ldr	r1, [sp, #12]
 8002698:	1a5b      	subs	r3, r3, r1
 800269a:	42ab      	cmp	r3, r5
 800269c:	dcf2      	bgt.n	8002684 <_printf_i+0x210>
 800269e:	e7eb      	b.n	8002678 <_printf_i+0x204>
 80026a0:	2500      	movs	r5, #0
 80026a2:	f104 0619 	add.w	r6, r4, #25
 80026a6:	e7f5      	b.n	8002694 <_printf_i+0x220>
 80026a8:	08002a09 	.word	0x08002a09
 80026ac:	08002a1a 	.word	0x08002a1a

080026b0 <__sflush_r>:
 80026b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80026b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b8:	0716      	lsls	r6, r2, #28
 80026ba:	4605      	mov	r5, r0
 80026bc:	460c      	mov	r4, r1
 80026be:	d454      	bmi.n	800276a <__sflush_r+0xba>
 80026c0:	684b      	ldr	r3, [r1, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	dc02      	bgt.n	80026cc <__sflush_r+0x1c>
 80026c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	dd48      	ble.n	800275e <__sflush_r+0xae>
 80026cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80026ce:	2e00      	cmp	r6, #0
 80026d0:	d045      	beq.n	800275e <__sflush_r+0xae>
 80026d2:	2300      	movs	r3, #0
 80026d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80026d8:	682f      	ldr	r7, [r5, #0]
 80026da:	6a21      	ldr	r1, [r4, #32]
 80026dc:	602b      	str	r3, [r5, #0]
 80026de:	d030      	beq.n	8002742 <__sflush_r+0x92>
 80026e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80026e2:	89a3      	ldrh	r3, [r4, #12]
 80026e4:	0759      	lsls	r1, r3, #29
 80026e6:	d505      	bpl.n	80026f4 <__sflush_r+0x44>
 80026e8:	6863      	ldr	r3, [r4, #4]
 80026ea:	1ad2      	subs	r2, r2, r3
 80026ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80026ee:	b10b      	cbz	r3, 80026f4 <__sflush_r+0x44>
 80026f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026f2:	1ad2      	subs	r2, r2, r3
 80026f4:	2300      	movs	r3, #0
 80026f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80026f8:	6a21      	ldr	r1, [r4, #32]
 80026fa:	4628      	mov	r0, r5
 80026fc:	47b0      	blx	r6
 80026fe:	1c43      	adds	r3, r0, #1
 8002700:	89a3      	ldrh	r3, [r4, #12]
 8002702:	d106      	bne.n	8002712 <__sflush_r+0x62>
 8002704:	6829      	ldr	r1, [r5, #0]
 8002706:	291d      	cmp	r1, #29
 8002708:	d82b      	bhi.n	8002762 <__sflush_r+0xb2>
 800270a:	4a2a      	ldr	r2, [pc, #168]	@ (80027b4 <__sflush_r+0x104>)
 800270c:	40ca      	lsrs	r2, r1
 800270e:	07d6      	lsls	r6, r2, #31
 8002710:	d527      	bpl.n	8002762 <__sflush_r+0xb2>
 8002712:	2200      	movs	r2, #0
 8002714:	6062      	str	r2, [r4, #4]
 8002716:	04d9      	lsls	r1, r3, #19
 8002718:	6922      	ldr	r2, [r4, #16]
 800271a:	6022      	str	r2, [r4, #0]
 800271c:	d504      	bpl.n	8002728 <__sflush_r+0x78>
 800271e:	1c42      	adds	r2, r0, #1
 8002720:	d101      	bne.n	8002726 <__sflush_r+0x76>
 8002722:	682b      	ldr	r3, [r5, #0]
 8002724:	b903      	cbnz	r3, 8002728 <__sflush_r+0x78>
 8002726:	6560      	str	r0, [r4, #84]	@ 0x54
 8002728:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800272a:	602f      	str	r7, [r5, #0]
 800272c:	b1b9      	cbz	r1, 800275e <__sflush_r+0xae>
 800272e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002732:	4299      	cmp	r1, r3
 8002734:	d002      	beq.n	800273c <__sflush_r+0x8c>
 8002736:	4628      	mov	r0, r5
 8002738:	f7ff fbf4 	bl	8001f24 <_free_r>
 800273c:	2300      	movs	r3, #0
 800273e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002740:	e00d      	b.n	800275e <__sflush_r+0xae>
 8002742:	2301      	movs	r3, #1
 8002744:	4628      	mov	r0, r5
 8002746:	47b0      	blx	r6
 8002748:	4602      	mov	r2, r0
 800274a:	1c50      	adds	r0, r2, #1
 800274c:	d1c9      	bne.n	80026e2 <__sflush_r+0x32>
 800274e:	682b      	ldr	r3, [r5, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0c6      	beq.n	80026e2 <__sflush_r+0x32>
 8002754:	2b1d      	cmp	r3, #29
 8002756:	d001      	beq.n	800275c <__sflush_r+0xac>
 8002758:	2b16      	cmp	r3, #22
 800275a:	d11e      	bne.n	800279a <__sflush_r+0xea>
 800275c:	602f      	str	r7, [r5, #0]
 800275e:	2000      	movs	r0, #0
 8002760:	e022      	b.n	80027a8 <__sflush_r+0xf8>
 8002762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002766:	b21b      	sxth	r3, r3
 8002768:	e01b      	b.n	80027a2 <__sflush_r+0xf2>
 800276a:	690f      	ldr	r7, [r1, #16]
 800276c:	2f00      	cmp	r7, #0
 800276e:	d0f6      	beq.n	800275e <__sflush_r+0xae>
 8002770:	0793      	lsls	r3, r2, #30
 8002772:	680e      	ldr	r6, [r1, #0]
 8002774:	bf08      	it	eq
 8002776:	694b      	ldreq	r3, [r1, #20]
 8002778:	600f      	str	r7, [r1, #0]
 800277a:	bf18      	it	ne
 800277c:	2300      	movne	r3, #0
 800277e:	eba6 0807 	sub.w	r8, r6, r7
 8002782:	608b      	str	r3, [r1, #8]
 8002784:	f1b8 0f00 	cmp.w	r8, #0
 8002788:	dde9      	ble.n	800275e <__sflush_r+0xae>
 800278a:	6a21      	ldr	r1, [r4, #32]
 800278c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800278e:	4643      	mov	r3, r8
 8002790:	463a      	mov	r2, r7
 8002792:	4628      	mov	r0, r5
 8002794:	47b0      	blx	r6
 8002796:	2800      	cmp	r0, #0
 8002798:	dc08      	bgt.n	80027ac <__sflush_r+0xfc>
 800279a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800279e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027a2:	81a3      	strh	r3, [r4, #12]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027ac:	4407      	add	r7, r0
 80027ae:	eba8 0800 	sub.w	r8, r8, r0
 80027b2:	e7e7      	b.n	8002784 <__sflush_r+0xd4>
 80027b4:	20400001 	.word	0x20400001

080027b8 <_fflush_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	690b      	ldr	r3, [r1, #16]
 80027bc:	4605      	mov	r5, r0
 80027be:	460c      	mov	r4, r1
 80027c0:	b913      	cbnz	r3, 80027c8 <_fflush_r+0x10>
 80027c2:	2500      	movs	r5, #0
 80027c4:	4628      	mov	r0, r5
 80027c6:	bd38      	pop	{r3, r4, r5, pc}
 80027c8:	b118      	cbz	r0, 80027d2 <_fflush_r+0x1a>
 80027ca:	6a03      	ldr	r3, [r0, #32]
 80027cc:	b90b      	cbnz	r3, 80027d2 <_fflush_r+0x1a>
 80027ce:	f7ff f9af 	bl	8001b30 <__sinit>
 80027d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f3      	beq.n	80027c2 <_fflush_r+0xa>
 80027da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80027dc:	07d0      	lsls	r0, r2, #31
 80027de:	d404      	bmi.n	80027ea <_fflush_r+0x32>
 80027e0:	0599      	lsls	r1, r3, #22
 80027e2:	d402      	bmi.n	80027ea <_fflush_r+0x32>
 80027e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027e6:	f7ff fb9a 	bl	8001f1e <__retarget_lock_acquire_recursive>
 80027ea:	4628      	mov	r0, r5
 80027ec:	4621      	mov	r1, r4
 80027ee:	f7ff ff5f 	bl	80026b0 <__sflush_r>
 80027f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80027f4:	07da      	lsls	r2, r3, #31
 80027f6:	4605      	mov	r5, r0
 80027f8:	d4e4      	bmi.n	80027c4 <_fflush_r+0xc>
 80027fa:	89a3      	ldrh	r3, [r4, #12]
 80027fc:	059b      	lsls	r3, r3, #22
 80027fe:	d4e1      	bmi.n	80027c4 <_fflush_r+0xc>
 8002800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002802:	f7ff fb8d 	bl	8001f20 <__retarget_lock_release_recursive>
 8002806:	e7dd      	b.n	80027c4 <_fflush_r+0xc>

08002808 <__swhatbuf_r>:
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	460c      	mov	r4, r1
 800280c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002810:	2900      	cmp	r1, #0
 8002812:	b096      	sub	sp, #88	@ 0x58
 8002814:	4615      	mov	r5, r2
 8002816:	461e      	mov	r6, r3
 8002818:	da0d      	bge.n	8002836 <__swhatbuf_r+0x2e>
 800281a:	89a3      	ldrh	r3, [r4, #12]
 800281c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002820:	f04f 0100 	mov.w	r1, #0
 8002824:	bf14      	ite	ne
 8002826:	2340      	movne	r3, #64	@ 0x40
 8002828:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800282c:	2000      	movs	r0, #0
 800282e:	6031      	str	r1, [r6, #0]
 8002830:	602b      	str	r3, [r5, #0]
 8002832:	b016      	add	sp, #88	@ 0x58
 8002834:	bd70      	pop	{r4, r5, r6, pc}
 8002836:	466a      	mov	r2, sp
 8002838:	f000 f848 	bl	80028cc <_fstat_r>
 800283c:	2800      	cmp	r0, #0
 800283e:	dbec      	blt.n	800281a <__swhatbuf_r+0x12>
 8002840:	9901      	ldr	r1, [sp, #4]
 8002842:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002846:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800284a:	4259      	negs	r1, r3
 800284c:	4159      	adcs	r1, r3
 800284e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002852:	e7eb      	b.n	800282c <__swhatbuf_r+0x24>

08002854 <__smakebuf_r>:
 8002854:	898b      	ldrh	r3, [r1, #12]
 8002856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002858:	079d      	lsls	r5, r3, #30
 800285a:	4606      	mov	r6, r0
 800285c:	460c      	mov	r4, r1
 800285e:	d507      	bpl.n	8002870 <__smakebuf_r+0x1c>
 8002860:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	6123      	str	r3, [r4, #16]
 8002868:	2301      	movs	r3, #1
 800286a:	6163      	str	r3, [r4, #20]
 800286c:	b003      	add	sp, #12
 800286e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002870:	ab01      	add	r3, sp, #4
 8002872:	466a      	mov	r2, sp
 8002874:	f7ff ffc8 	bl	8002808 <__swhatbuf_r>
 8002878:	9f00      	ldr	r7, [sp, #0]
 800287a:	4605      	mov	r5, r0
 800287c:	4639      	mov	r1, r7
 800287e:	4630      	mov	r0, r6
 8002880:	f7ff fbbc 	bl	8001ffc <_malloc_r>
 8002884:	b948      	cbnz	r0, 800289a <__smakebuf_r+0x46>
 8002886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800288a:	059a      	lsls	r2, r3, #22
 800288c:	d4ee      	bmi.n	800286c <__smakebuf_r+0x18>
 800288e:	f023 0303 	bic.w	r3, r3, #3
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	81a3      	strh	r3, [r4, #12]
 8002898:	e7e2      	b.n	8002860 <__smakebuf_r+0xc>
 800289a:	89a3      	ldrh	r3, [r4, #12]
 800289c:	6020      	str	r0, [r4, #0]
 800289e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028a2:	81a3      	strh	r3, [r4, #12]
 80028a4:	9b01      	ldr	r3, [sp, #4]
 80028a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80028aa:	b15b      	cbz	r3, 80028c4 <__smakebuf_r+0x70>
 80028ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028b0:	4630      	mov	r0, r6
 80028b2:	f000 f81d 	bl	80028f0 <_isatty_r>
 80028b6:	b128      	cbz	r0, 80028c4 <__smakebuf_r+0x70>
 80028b8:	89a3      	ldrh	r3, [r4, #12]
 80028ba:	f023 0303 	bic.w	r3, r3, #3
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	81a3      	strh	r3, [r4, #12]
 80028c4:	89a3      	ldrh	r3, [r4, #12]
 80028c6:	431d      	orrs	r5, r3
 80028c8:	81a5      	strh	r5, [r4, #12]
 80028ca:	e7cf      	b.n	800286c <__smakebuf_r+0x18>

080028cc <_fstat_r>:
 80028cc:	b538      	push	{r3, r4, r5, lr}
 80028ce:	4d07      	ldr	r5, [pc, #28]	@ (80028ec <_fstat_r+0x20>)
 80028d0:	2300      	movs	r3, #0
 80028d2:	4604      	mov	r4, r0
 80028d4:	4608      	mov	r0, r1
 80028d6:	4611      	mov	r1, r2
 80028d8:	602b      	str	r3, [r5, #0]
 80028da:	f7fd ff02 	bl	80006e2 <_fstat>
 80028de:	1c43      	adds	r3, r0, #1
 80028e0:	d102      	bne.n	80028e8 <_fstat_r+0x1c>
 80028e2:	682b      	ldr	r3, [r5, #0]
 80028e4:	b103      	cbz	r3, 80028e8 <_fstat_r+0x1c>
 80028e6:	6023      	str	r3, [r4, #0]
 80028e8:	bd38      	pop	{r3, r4, r5, pc}
 80028ea:	bf00      	nop
 80028ec:	200001f8 	.word	0x200001f8

080028f0 <_isatty_r>:
 80028f0:	b538      	push	{r3, r4, r5, lr}
 80028f2:	4d06      	ldr	r5, [pc, #24]	@ (800290c <_isatty_r+0x1c>)
 80028f4:	2300      	movs	r3, #0
 80028f6:	4604      	mov	r4, r0
 80028f8:	4608      	mov	r0, r1
 80028fa:	602b      	str	r3, [r5, #0]
 80028fc:	f7fd ff01 	bl	8000702 <_isatty>
 8002900:	1c43      	adds	r3, r0, #1
 8002902:	d102      	bne.n	800290a <_isatty_r+0x1a>
 8002904:	682b      	ldr	r3, [r5, #0]
 8002906:	b103      	cbz	r3, 800290a <_isatty_r+0x1a>
 8002908:	6023      	str	r3, [r4, #0]
 800290a:	bd38      	pop	{r3, r4, r5, pc}
 800290c:	200001f8 	.word	0x200001f8

08002910 <_sbrk_r>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4d06      	ldr	r5, [pc, #24]	@ (800292c <_sbrk_r+0x1c>)
 8002914:	2300      	movs	r3, #0
 8002916:	4604      	mov	r4, r0
 8002918:	4608      	mov	r0, r1
 800291a:	602b      	str	r3, [r5, #0]
 800291c:	f7fd ff0a 	bl	8000734 <_sbrk>
 8002920:	1c43      	adds	r3, r0, #1
 8002922:	d102      	bne.n	800292a <_sbrk_r+0x1a>
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	b103      	cbz	r3, 800292a <_sbrk_r+0x1a>
 8002928:	6023      	str	r3, [r4, #0]
 800292a:	bd38      	pop	{r3, r4, r5, pc}
 800292c:	200001f8 	.word	0x200001f8

08002930 <_init>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	bf00      	nop
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr

0800293c <_fini>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	bf00      	nop
 8002940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002942:	bc08      	pop	{r3}
 8002944:	469e      	mov	lr, r3
 8002946:	4770      	bx	lr
